{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/nicos/Dev/poc/poc-pwa/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { firstValueFrom } from 'rxjs';\nimport { db, ISynchroRecordType } from './db';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./crud-api.service\";\nimport * as i2 from \"cocori-ng/src/feature-core\";\nexport let SynchroService = /*#__PURE__*/(() => {\n  class SynchroService {\n    constructor(crudApiService, helperService) {\n      this.crudApiService = crudApiService;\n      this.helperService = helperService;\n    }\n\n    serverToIndexedDB(listsToAdd) {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        yield Promise.all(listsToAdd.map( /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (list) {\n            const idListAdded = yield db.todoLists.add({\n              id: _this.helperService.generateGuid(),\n              title: list.title\n            });\n\n            if (list.todoItems?.length) {\n              yield Promise.all(list.todoItems.map( /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator(function* (item) {\n                  if (item.title) {\n                    yield db.todoItems.add({\n                      title: item.title,\n                      id: _this.helperService.generateGuid(),\n                      todoListId: idListAdded\n                    });\n                  } else {\n                    yield 1;\n                  }\n                });\n\n                return function (_x2) {\n                  return _ref2.apply(this, arguments);\n                };\n              }()));\n            }\n          });\n\n          return function (_x) {\n            return _ref.apply(this, arguments);\n          };\n        }()));\n      })();\n    }\n\n    indexedDBToServer() {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        const newId = _this2.helperService.generateGuid();\n\n        const listsToAdd = yield db.todoLists.where({\n          recordType: ISynchroRecordType.ADD\n        }).toArray();\n        yield Promise.all(listsToAdd.map( /*#__PURE__*/function () {\n          var _ref3 = _asyncToGenerator(function* (list) {\n            const listeName = list.title;\n            yield firstValueFrom(_this2.crudApiService.NewListRessouce(listeName));\n            const listItemsToAdd = yield db.todoItems.where({\n              todoListId: list.id,\n              recordType: ISynchroRecordType.ADD\n            }).toArray();\n            yield Promise.all(listItemsToAdd.map( /*#__PURE__*/function () {\n              var _ref4 = _asyncToGenerator(function* (item) {\n                yield firstValueFrom(_this2.crudApiService.NewListRessouce(listeName, item.title));\n              });\n\n              return function (_x4) {\n                return _ref4.apply(this, arguments);\n              };\n            }()));\n          });\n\n          return function (_x3) {\n            return _ref3.apply(this, arguments);\n          };\n        }()));\n      })();\n    }\n\n  }\n\n  SynchroService.ɵfac = function SynchroService_Factory(t) {\n    return new (t || SynchroService)(i0.ɵɵinject(i1.CrudApiService), i0.ɵɵinject(i2.HelperService));\n  };\n\n  SynchroService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SynchroService,\n    factory: SynchroService.ɵfac\n  });\n  return SynchroService;\n})();","map":null,"metadata":{},"sourceType":"module"}