{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/nicos/Dev/poc/poc-pwa/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { ChangeDetectorRef } from '@angular/core';\nimport { StringService } from 'cocori-ng/src/feature-core';\nimport { firstValueFrom, from, map, mergeMap, Subject, toArray } from 'rxjs';\nimport { IConnectionStatusValue } from '../../../services/connection-status.service';\nimport { SynchroService } from '../../../services/synchro.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../services/connection-status.service\";\nimport * as i2 from \"src/services/crud-api.service\";\nimport * as i3 from \"../../../services/synchro.service\";\nimport * as i4 from \"../../../services/crud-db.service\";\nexport class ReadonlyComponent {\n  constructor(connectionStatusService, crudApiService, synchroService, crudDbService, cdr) {\n    this.connectionStatusService = connectionStatusService;\n    this.crudApiService = crudApiService;\n    this.synchroService = synchroService;\n    this.crudDbService = crudDbService;\n    this.cdr = cdr;\n    this.listName = 'My new list';\n    this.todoLists = [];\n  }\n\n  ngOnInit() {\n    this.connectionStatusService.onConnectionStatutUpdated.subscribe(data => {\n      this.connectionStatus = data;\n      this.readDatas();\n    });\n  }\n\n  readDatas() {\n    this.todoLists = [];\n\n    if (this.connectionStatus === IConnectionStatusValue.ONLINE) {\n      this.getAllTodosListItemsAPI();\n    } else {\n      this.getAllTodosListItemsIndexedDb();\n    }\n  }\n\n  getAllTodosListItemsIndexedDb() {\n    this.todoLists = [];\n    this.crudDbService.getRecords().subscribe(datas => {\n      this.todoLists = datas;\n      this.cdr.detectChanges();\n    });\n    this.cdr.detectChanges();\n  }\n\n  getAllTodosListItemsAPI() {\n    var subject = new Subject();\n    this.todoLists.splice(0, this.todoLists.length);\n    /** all the lists created */\n\n    this.crudApiService.GetCrucrudInfos('').pipe(mergeMap(lists => // `from` emits each contact separately\n    from(lists).pipe( // load each contact\n    mergeMap(list => this.getListTodoItems(list)), // collect all contacts into an array\n    toArray(), // add the newly fetched data to original result\n    map(todoLists => ({ ...this.todoLists,\n      todoLists\n    }))))).subscribe(datas => {\n      this.todoLists = datas.todoLists;\n      this.cdr.detectChanges();\n      subject.next(datas.todoLists);\n    });\n    return subject.asObservable();\n  }\n  /**\r\n   * It takes a list name as a parameter, calls the GetCrucrudInfos function from the crudApiService,\r\n   * and then maps the result to an object with a title and todoItems property.\r\n   * @param {string} listName - string - the name of the list you want to get the items from\r\n   * @returns An Observable of type { title: string, todoItems: any[] }\r\n   */\n\n\n  getListTodoItems(listName) {\n    return this.crudApiService.GetCrucrudInfos(listName).pipe(map(todoItems => ({\n      title: listName,\n      todoItems: todoItems\n    })));\n  }\n\n  addNewList() {\n    this.listName = new StringService(this.listName).removeAllSpaces().removeAllSpecialsCharacters().replaceAllAccentByNonAccentCharacters().toString();\n\n    if (this.connectionStatus === IConnectionStatusValue.ONLINE) {\n      this.crudApiService.NewListRessouce(this.listName).pipe().subscribe(datas => {\n        this.readDatas();\n      });\n    } else {\n      this.crudDbService.addList(this.listName).subscribe(() => {\n        this.readDatas();\n      });\n    }\n  }\n\n  resetLocalDatabase() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this.crudDbService.resetDatabase();\n\n      if (_this.connectionStatus === IConnectionStatusValue.OFFLINE) {\n        _this.readDatas();\n      }\n    })();\n  }\n\n  resetServerDatabase() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      yield Promise.all(_this2.todoLists.map( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (list) {\n          const listeName = list.title;\n          yield firstValueFrom(_this2.crudApiService.DeleteListRessource(listeName));\n        });\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()));\n    })();\n  }\n\n  identifyList(index, list) {\n    return `${list.id}${list.title}`;\n  }\n\n  sychronize() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this3.connectionStatus === IConnectionStatusValue.ONLINE) {\n        yield _this3.synchroService.indexedDBToServer();\n        yield _this3.crudDbService.resetDatabase();\n        yield firstValueFrom(_this3.getAllTodosListItemsAPI());\n        yield _this3.synchroService.serverToIndexedDB(_this3.todoLists);\n\n        _this3.readDatas();\n      } else {\n        window.alert(\"Vous devez être connecté au réseau pour synchroniser les données de l'application.\");\n      }\n    })();\n  }\n\n}\n\nReadonlyComponent.ɵfac = function ReadonlyComponent_Factory(t) {\n  return new (t || ReadonlyComponent)(i0.ɵɵdirectiveInject(i1.ConnectionStatusService), i0.ɵɵdirectiveInject(i2.CrudApiService), i0.ɵɵdirectiveInject(i3.SynchroService), i0.ɵɵdirectiveInject(i4.CrudDbService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n\nReadonlyComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ReadonlyComponent,\n  selectors: [[\"page-readonly\"]],\n  features: [i0.ɵɵProvidersFeature([SynchroService])],\n  decls: 2,\n  vars: 0,\n  template: function ReadonlyComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h1\");\n      i0.ɵɵtext(1, \"Hello\");\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\".newListContainer[_ngcontent-%COMP%] {\\n  margin-top: 30px;\\n  padding-bottom: 20px;\\n  border-bottom: 1px dashed #504f4f;\\n}\\n\\n.btnSynchro[_ngcontent-%COMP%] {\\n  text-align: center;\\n  margin-top: 10px;\\n}\\n\\n.btnSynchro[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\\n  margin: 0 5px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlYWRvbmx5LmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsZ0JBQUE7RUFDQSxvQkFBQTtFQUNBLGlDQUFBO0FBQ0Y7O0FBRUE7RUFDRSxrQkFBQTtFQUNBLGdCQUFBO0FBQ0Y7O0FBQ0U7RUFDRSxhQUFBO0FBQ0oiLCJmaWxlIjoicmVhZG9ubHkuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIubmV3TGlzdENvbnRhaW5lciB7XHJcbiAgbWFyZ2luLXRvcDogMzBweDtcclxuICBwYWRkaW5nLWJvdHRvbTogMjBweDtcclxuICBib3JkZXItYm90dG9tOiAxcHggZGFzaGVkICM1MDRmNGY7XHJcbn1cclxuXHJcbi5idG5TeW5jaHJvIHtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7IFxyXG4gIG1hcmdpbi10b3A6IDEwcHg7XHJcblxyXG4gIGJ1dHRvbiB7XHJcbiAgICBtYXJnaW46IDAgNXB4O1xyXG4gIH1cclxufVxyXG4iXX0= */\"],\n  changeDetection: 0\n});","map":{"version":3,"mappings":";AAAA,SAAkCA,iBAAlC,QAA8E,eAA9E;AACA,SAASC,aAAT,QAA8B,4BAA9B;AACA,SAASC,cAAT,EAAyBC,IAAzB,EAA+BC,GAA/B,EAAoCC,QAApC,EAA0DC,OAA1D,EAAmEC,OAAnE,QAAkF,MAAlF;AAIA,SAAkCC,sBAAlC,QAAgE,6CAAhE;AAEA,SAASC,cAAT,QAA+B,mCAA/B;;;;;;AASA,OAAM,MAAOC,iBAAP,CAAwB;EAK5BC,YACUC,uBADV,EAEUC,cAFV,EAGUC,cAHV,EAIUC,aAJV,EAKUC,GALV,EAKgC;IAJtB;IACA;IACA;IACA;IACA;IATV,gBAAW,aAAX;IACA,iBAAwB,EAAxB;EAQsC;;EAEtCC,QAAQ;IAEN,KAAKL,uBAAL,CAA6BM,yBAA7B,CAAuDC,SAAvD,CAAkEC,IAAD,IAAiC;MAChG,KAAKC,gBAAL,GAAwBD,IAAxB;MAEA,KAAKE,SAAL;IACD,CAJD;EAKD;;EAEOA,SAAS;IACf,KAAKC,SAAL,GAAiB,EAAjB;;IAEA,IAAI,KAAKF,gBAAL,KAA0Bb,sBAAsB,CAACgB,MAArD,EAA6D;MAC3D,KAAKC,uBAAL;IACD,CAFD,MAEO;MACL,KAAKC,6BAAL;IACD;EACF;;EAEOA,6BAA6B;IACnC,KAAKH,SAAL,GAAiB,EAAjB;IAEA,KAAKR,aAAL,CAAmBY,UAAnB,GAAgCR,SAAhC,CAA2CS,KAAD,IAAsB;MAC9D,KAAKL,SAAL,GAAiBK,KAAjB;MAEA,KAAKZ,GAAL,CAASa,aAAT;IACD,CAJD;IAMA,KAAKb,GAAL,CAASa,aAAT;EACD;;EAEOJ,uBAAuB;IAC7B,IAAIK,OAAO,GAAG,IAAIxB,OAAJ,EAAd;IAEA,KAAKiB,SAAL,CAAeQ,MAAf,CAAsB,CAAtB,EAAyB,KAAKR,SAAL,CAAeS,MAAxC;IAEA;;IACA,KAAKnB,cAAL,CAAoBoB,eAApB,CAAoC,EAApC,EAAwCC,IAAxC,CACE7B,QAAQ,CAAE8B,KAAD,IACP;IACAhC,IAAI,CAACgC,KAAD,CAAJ,CAAYD,IAAZ,EACE;IACA7B,QAAQ,CAAE+B,IAAD,IAAkB,KAAKC,gBAAL,CAAsBD,IAAtB,CAAnB,CAFV,EAGE;IACA7B,OAAO,EAJT,EAKE;IACAH,GAAG,CAACmB,SAAS,KAAK,EAAE,GAAG,KAAKA,SAAV;MAAqBA;IAArB,CAAL,CAAV,CANL,CAFM,CADV,EAWEJ,SAXF,CAWaS,KAAD,IAAqC;MAC/C,KAAKL,SAAL,GAAiBK,KAAK,CAACL,SAAvB;MAEA,KAAKP,GAAL,CAASa,aAAT;MAEAC,OAAO,CAACQ,IAAR,CAAaV,KAAK,CAACL,SAAnB;IACD,CAjBD;IAmBA,OAAOO,OAAO,CAACS,YAAR,EAAP;EACD;EAED;;;;;;;;EAMQF,gBAAgB,CAACG,QAAD,EAAiB;IACvC,OAAO,KAAK3B,cAAL,CAAoBoB,eAApB,CAAoCO,QAApC,EAA8CN,IAA9C,CACL9B,GAAG,CAACqC,SAAS,KAAK;MAAEC,KAAK,EAAEF,QAAT;MAAmBC,SAAS,EAAEA;IAA9B,CAAL,CAAV,CADE,CAAP;EAGD;;EAEME,UAAU;IACf,KAAKH,QAAL,GAAgB,IAAIvC,aAAJ,CAAkB,KAAKuC,QAAvB,EACbI,eADa,GAEbC,2BAFa,GAGbC,qCAHa,GAIbC,QAJa,EAAhB;;IAMA,IAAI,KAAK1B,gBAAL,KAA0Bb,sBAAsB,CAACgB,MAArD,EAA6D;MAC3D,KAAKX,cAAL,CAAoBmC,eAApB,CAAoC,KAAKR,QAAzC,EAAmDN,IAAnD,GACEf,SADF,CACaS,KAAD,IAAe;QACzB,KAAKN,SAAL;MACD,CAHD;IAID,CALD,MAKO;MACL,KAAKP,aAAL,CAAmBkC,OAAnB,CAA2B,KAAKT,QAAhC,EAA0CrB,SAA1C,CAAoD,MAAK;QACvD,KAAKG,SAAL;MACD,CAFD;IAGD;EACF;;EAEK4B,kBAAkB;IAAA;;IAAA;MACtB,MAAM,KAAI,CAACnC,aAAL,CAAmBoC,aAAnB,EAAN;;MAEA,IAAI,KAAI,CAAC9B,gBAAL,KAA0Bb,sBAAsB,CAAC4C,OAArD,EAA8D;QAC5D,KAAI,CAAC9B,SAAL;MACD;IALqB;EAMvB;;EAEK+B,mBAAmB;IAAA;;IAAA;MACvB,MAAMC,OAAO,CAACC,GAAR,CAAY,MAAI,CAAChC,SAAL,CAAenB,GAAf;QAAA,6BAAmB,WAAOgC,IAAP,EAAyB;UAC5D,MAAMoB,SAAS,GAAWpB,IAAI,CAACM,KAA/B;UAEA,MAAMxC,cAAc,CAAC,MAAI,CAACW,cAAL,CAAoB4C,mBAApB,CAAwCD,SAAxC,CAAD,CAApB;QACD,CAJiB;;QAAA;UAAA;QAAA;MAAA,IAAZ,CAAN;IADuB;EAMxB;;EAEDE,YAAY,CAACC,KAAD,EAAgBvB,IAAhB,EAA8B;IACxC,OAAO,GAAGA,IAAI,CAACwB,EAAE,GAAGxB,IAAI,CAACM,KAAK,EAA9B;EACD;;EAEKmB,UAAU;IAAA;;IAAA;MACd,IAAI,MAAI,CAACxC,gBAAL,KAA0Bb,sBAAsB,CAACgB,MAArD,EAA6D;QAE3D,MAAM,MAAI,CAACV,cAAL,CAAoBgD,iBAApB,EAAN;QAEA,MAAM,MAAI,CAAC/C,aAAL,CAAmBoC,aAAnB,EAAN;QAEA,MAAMjD,cAAc,CAAC,MAAI,CAACuB,uBAAL,EAAD,CAApB;QAEA,MAAM,MAAI,CAACX,cAAL,CAAoBiD,iBAApB,CAAsC,MAAI,CAACxC,SAA3C,CAAN;;QAEA,MAAI,CAACD,SAAL;MACD,CAXD,MAWO;QACL0C,MAAM,CAACC,KAAP,CAAa,oFAAb;MACD;IAda;EAef;;AAzI2B;;;mBAAjBvD,mBAAiBwD;AAAA;;;QAAjBxD;EAAiByD;EAAAC,iCAFjB,CAAC3D,cAAD,CAEiB;EAFD4D;EAAAC;EAAAC;IAAA;MCf7BL;MAAIA;MAAKA","names":["ChangeDetectorRef","StringService","firstValueFrom","from","map","mergeMap","Subject","toArray","IConnectionStatusValue","SynchroService","ReadonlyComponent","constructor","connectionStatusService","crudApiService","synchroService","crudDbService","cdr","ngOnInit","onConnectionStatutUpdated","subscribe","data","connectionStatus","readDatas","todoLists","ONLINE","getAllTodosListItemsAPI","getAllTodosListItemsIndexedDb","getRecords","datas","detectChanges","subject","splice","length","GetCrucrudInfos","pipe","lists","list","getListTodoItems","next","asObservable","listName","todoItems","title","addNewList","removeAllSpaces","removeAllSpecialsCharacters","replaceAllAccentByNonAccentCharacters","toString","NewListRessouce","addList","resetLocalDatabase","resetDatabase","OFFLINE","resetServerDatabase","Promise","all","listeName","DeleteListRessource","identifyList","index","id","sychronize","indexedDBToServer","serverToIndexedDB","window","alert","i0","selectors","features","decls","vars","template"],"sourceRoot":"","sources":["C:\\Users\\nicos\\Dev\\poc\\poc-pwa\\src\\app\\pages\\readonly\\readonly.component.ts","C:\\Users\\nicos\\Dev\\poc\\poc-pwa\\src\\app\\pages\\readonly\\readonly.component.html"],"sourcesContent":["import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit } from '@angular/core';\r\nimport { StringService } from 'cocori-ng/src/feature-core';\r\nimport { firstValueFrom, from, map, mergeMap, Observable, Subject, toArray } from 'rxjs';\r\nimport { CrudApiService } from 'src/services/crud-api.service';\r\nimport { TodoList } from 'src/services/db';\r\n\r\nimport { ConnectionStatusService, IConnectionStatusValue } from '../../../services/connection-status.service';\r\nimport { CrudDbService } from '../../../services/crud-db.service';\r\nimport { SynchroService } from '../../../services/synchro.service';\r\n\r\n@Component({\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  selector: 'page-readonly',\r\n  templateUrl: './readonly.component.html',\r\n  styleUrls: ['./readonly.component.scss'],\r\n  providers: [SynchroService]\r\n})\r\nexport class ReadonlyComponent implements OnInit {\r\n  listName = 'My new list';\r\n  todoLists: TodoList[] = [];\r\n  connectionStatus!: IConnectionStatusValue;\r\n\r\n  constructor(\r\n    private connectionStatusService: ConnectionStatusService,\r\n    private crudApiService: CrudApiService,\r\n    private synchroService: SynchroService,\r\n    private crudDbService: CrudDbService,\r\n    private cdr: ChangeDetectorRef,) { }\r\n\r\n  ngOnInit(): void {\r\n\r\n    this.connectionStatusService.onConnectionStatutUpdated.subscribe((data: IConnectionStatusValue) => {\r\n      this.connectionStatus = data\r\n\r\n      this.readDatas()\r\n    })\r\n  }\r\n\r\n  private readDatas() {\r\n    this.todoLists = []\r\n\r\n    if (this.connectionStatus === IConnectionStatusValue.ONLINE) {\r\n      this.getAllTodosListItemsAPI()\r\n    } else {\r\n      this.getAllTodosListItemsIndexedDb()\r\n    }\r\n  }\r\n\r\n  private getAllTodosListItemsIndexedDb() {\r\n    this.todoLists = []\r\n\r\n    this.crudDbService.getRecords().subscribe((datas: TodoList[]) => {\r\n      this.todoLists = datas\r\n\r\n      this.cdr.detectChanges()\r\n    })\r\n\r\n    this.cdr.detectChanges()\r\n  }\r\n\r\n  private getAllTodosListItemsAPI(): Observable<any> {\r\n    var subject = new Subject<TodoList[]>();\r\n\r\n    this.todoLists.splice(0, this.todoLists.length)\r\n\r\n    /** all the lists created */\r\n    this.crudApiService.GetCrucrudInfos('').pipe(\r\n      mergeMap((lists: string[]) =>\r\n        // `from` emits each contact separately\r\n        from(lists).pipe(\r\n          // load each contact\r\n          mergeMap((list: string) => this.getListTodoItems(list)),\r\n          // collect all contacts into an array\r\n          toArray(),\r\n          // add the newly fetched data to original result\r\n          map(todoLists => ({ ...this.todoLists, todoLists })),\r\n        ))\r\n    ).subscribe((datas: { todoLists: TodoList[] }) => {\r\n      this.todoLists = datas.todoLists\r\n\r\n      this.cdr.detectChanges()\r\n\r\n      subject.next(datas.todoLists);\r\n    })\r\n\r\n    return subject.asObservable();\r\n  }\r\n\r\n  /**\r\n   * It takes a list name as a parameter, calls the GetCrucrudInfos function from the crudApiService,\r\n   * and then maps the result to an object with a title and todoItems property.\r\n   * @param {string} listName - string - the name of the list you want to get the items from\r\n   * @returns An Observable of type { title: string, todoItems: any[] }\r\n   */\r\n  private getListTodoItems(listName: string) {\r\n    return this.crudApiService.GetCrucrudInfos(listName).pipe(\r\n      map(todoItems => ({ title: listName, todoItems: todoItems }))\r\n    )\r\n  }\r\n\r\n  public addNewList() {\r\n    this.listName = new StringService(this.listName)\r\n      .removeAllSpaces()\r\n      .removeAllSpecialsCharacters()\r\n      .replaceAllAccentByNonAccentCharacters()\r\n      .toString()\r\n\r\n    if (this.connectionStatus === IConnectionStatusValue.ONLINE) {\r\n      this.crudApiService.NewListRessouce(this.listName).pipe(\r\n      ).subscribe((datas: any) => {\r\n        this.readDatas()\r\n      })\r\n    } else {\r\n      this.crudDbService.addList(this.listName).subscribe(() => {\r\n        this.readDatas()\r\n      })\r\n    }\r\n  }\r\n\r\n  async resetLocalDatabase() {\r\n    await this.crudDbService.resetDatabase()\r\n\r\n    if (this.connectionStatus === IConnectionStatusValue.OFFLINE) {\r\n      this.readDatas()\r\n    }\r\n  }\r\n\r\n  async resetServerDatabase() {\r\n    await Promise.all(this.todoLists.map(async (list: TodoList) => {\r\n      const listeName: string = list.title\r\n\r\n      await firstValueFrom(this.crudApiService.DeleteListRessource(listeName))\r\n    }));\r\n  }\r\n\r\n  identifyList(index: number, list: TodoList) {\r\n    return `${list.id}${list.title}`;\r\n  }\r\n\r\n  async sychronize() {\r\n    if (this.connectionStatus === IConnectionStatusValue.ONLINE) {\r\n\r\n      await this.synchroService.indexedDBToServer()\r\n\r\n      await this.crudDbService.resetDatabase()\r\n\r\n      await firstValueFrom(this.getAllTodosListItemsAPI())\r\n\r\n      await this.synchroService.serverToIndexedDB(this.todoLists)\r\n\r\n      this.readDatas()\r\n    } else {\r\n      window.alert(\"Vous devez être connecté au réseau pour synchroniser les données de l'application.\")\r\n    }\r\n  }\r\n}\r\n","<h1>Hello</h1>"]},"metadata":{},"sourceType":"module"}