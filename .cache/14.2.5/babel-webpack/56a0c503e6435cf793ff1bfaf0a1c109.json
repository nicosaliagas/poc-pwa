{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/nicos/Dev/poc/poc-pwa/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { ChangeDetectorRef } from '@angular/core';\nimport { StringService } from 'cocori-ng/src/feature-core';\nimport { liveQuery } from 'dexie';\nimport { from, map, mergeMap, toArray } from 'rxjs';\nimport { db } from 'src/services/db';\nimport { IConnectionStatusValue } from '../../../services/connection-status.service';\nimport { SynchroService } from '../../../services/synchro.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../services/connection-status.service\";\nimport * as i2 from \"src/services/crud-api.service\";\nimport * as i3 from \"../../../services/synchro.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/forms\";\nimport * as i6 from \"./item-list/item-list.component\";\n\nfunction HomeComponent_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ÉµÉµelementStart(0, \"div\");\n    i0.ÉµÉµelement(1, \"item-list\", 7);\n    i0.ÉµÉµelementEnd();\n  }\n\n  if (rf & 2) {\n    const todoList_r2 = ctx.$implicit;\n    i0.ÉµÉµadvance(1);\n    i0.ÉµÉµproperty(\"todoList\", todoList_r2);\n  }\n}\n\nexport let HomeComponent = /*#__PURE__*/(() => {\n  class HomeComponent {\n    constructor(connectionStatusService, crudApiService, synchroService, cdr) {\n      this.connectionStatusService = connectionStatusService;\n      this.crudApiService = crudApiService;\n      this.synchroService = synchroService;\n      this.cdr = cdr;\n      this.todoLists$ = liveQuery(() => db.todoLists.toArray());\n      this.listName = 'My new list';\n      this.todoLists = [];\n    }\n\n    ngOnInit() {\n      this.getAllTodosListItemsAPI();\n      this.todoLists$.subscribe(datas => {\n        console.log(\"ðŸ’€\", datas);\n      });\n      this.connectionStatusService.onConnectionStatutUpdated.subscribe(data => {\n        if (data === IConnectionStatusValue.ONLINE) {\n          console.log(\"ðŸ¥° ONLINE !!!!!!!!!\");\n        } else {\n          console.log(\"ðŸ’© OFFLINE !!!!!!!!!\");\n        }\n      });\n    }\n\n    getAllTodosListItemsAPI() {\n      /** all the lists created */\n      this.crudApiService.GetCrucrudInfos('').pipe(mergeMap(lists => // `from` emits each contact separately\n      from(lists).pipe( // load each contact\n      mergeMap(list => this.getListTodoItems(list)), // collect all contacts into an array\n      toArray(), // add the newly fetched data to original result\n      map(todoLists => ({ ...this.todoLists,\n        todoLists\n      }))))).subscribe(datas => {\n        this.todoLists = datas.todoLists;\n        console.log(\"datas >>>>>>>>>>> \", datas);\n        console.log(\"lists >>>>>>>>>>> \", this.todoLists);\n        this.cdr.detectChanges();\n      });\n    }\n    /**\r\n     * It takes a list name as a parameter, calls the GetCrucrudInfos function from the crudApiService,\r\n     * and then maps the result to an object with a title and todoItems property.\r\n     * @param {string} listName - string - the name of the list you want to get the items from\r\n     * @returns An Observable of type { title: string, todoItems: any[] }\r\n     */\n\n\n    getListTodoItems(listName) {\n      return this.crudApiService.GetCrucrudInfos(listName).pipe(map(todoItems => ({\n        title: listName,\n        todoItems: todoItems\n      })));\n    }\n\n    addNewList() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        _this.listName = new StringService(_this.listName).removeAllSpaces().removeAllSpecialsCharacters().replaceAllAccentByNonAccentCharacters().toString();\n\n        _this.crudApiService.NewListRessouce(_this.listName).pipe().subscribe(datas => {\n          _this.getAllTodosListItemsAPI();\n        });\n      })();\n    }\n\n    resetDatabase() {\n      return _asyncToGenerator(function* () {\n        yield db.resetDatabase();\n      })();\n    }\n\n    identifyList(index, list) {\n      return `${list.id}${list.title}`;\n    }\n\n    synchroServerToIndexedDb() {\n      console.log(\"synchroServerToIndexedDb > \", this.todoLists);\n      this.synchroService.serverToIndexedDB(this.todoLists);\n    }\n\n    synchroIndexedDbToServer() {\n      this.synchroService.indexedDBToServer();\n    }\n\n  }\n\n  HomeComponent.Éµfac = function HomeComponent_Factory(t) {\n    return new (t || HomeComponent)(i0.ÉµÉµdirectiveInject(i1.ConnectionStatusService), i0.ÉµÉµdirectiveInject(i2.CrudApiService), i0.ÉµÉµdirectiveInject(i3.SynchroService), i0.ÉµÉµdirectiveInject(i0.ChangeDetectorRef));\n  };\n\n  HomeComponent.Éµcmp = /*@__PURE__*/i0.ÉµÉµdefineComponent({\n    type: HomeComponent,\n    selectors: [[\"page-home\"]],\n    features: [i0.ÉµÉµProvidersFeature([SynchroService])],\n    decls: 19,\n    vars: 3,\n    consts: [[1, \"btnSynchro\"], [\"type\", \"submit\", 3, \"click\"], [1, \"newListContainer\", 2, \"margin-top\", \"30px\"], [\"autocomplete\", \"off\", \"type\", \"text\", \"id\", \"name\", 3, \"ngModel\", \"ngModelChange\"], [\"name\", \"\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"click\"], [3, \"todoList\"]],\n    template: function HomeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ÉµÉµelementStart(0, \"div\", 0)(1, \"button\", 1);\n        i0.ÉµÉµlistener(\"click\", function HomeComponent_Template_button_click_1_listener() {\n          return ctx.synchroServerToIndexedDb();\n        });\n        i0.ÉµÉµtext(2, \"\\uD83D\\uDD01 Server -> Local \\uD83E\\uDD70\");\n        i0.ÉµÉµelementEnd();\n        i0.ÉµÉµelementStart(3, \"button\", 1);\n        i0.ÉµÉµlistener(\"click\", function HomeComponent_Template_button_click_3_listener() {\n          return ctx.synchroIndexedDbToServer();\n        });\n        i0.ÉµÉµtext(4, \"\\uD83D\\uDD01 Local -> Server\");\n        i0.ÉµÉµelementEnd()();\n        i0.ÉµÉµelementStart(5, \"div\", 2)(6, \"h3\");\n        i0.ÉµÉµtext(7, \"New List : \");\n        i0.ÉµÉµelementEnd();\n        i0.ÉµÉµelementStart(8, \"label\");\n        i0.ÉµÉµtext(9, \" List : \");\n        i0.ÉµÉµelementStart(10, \"input\", 3, 4);\n        i0.ÉµÉµlistener(\"ngModelChange\", function HomeComponent_Template_input_ngModelChange_10_listener($event) {\n          return ctx.listName = $event;\n        });\n        i0.ÉµÉµelementEnd()();\n        i0.ÉµÉµelementStart(12, \"button\", 1);\n        i0.ÉµÉµlistener(\"click\", function HomeComponent_Template_button_click_12_listener() {\n          return ctx.addNewList();\n        });\n        i0.ÉµÉµtext(13, \"Add new list\");\n        i0.ÉµÉµelementEnd()();\n        i0.ÉµÉµtemplate(14, HomeComponent_div_14_Template, 2, 1, \"div\", 5);\n        i0.ÉµÉµelementStart(15, \"h3\");\n        i0.ÉµÉµtext(16, \"Reset the Database\");\n        i0.ÉµÉµelementEnd();\n        i0.ÉµÉµelementStart(17, \"button\", 6);\n        i0.ÉµÉµlistener(\"click\", function HomeComponent_Template_button_click_17_listener() {\n          return ctx.resetDatabase();\n        });\n        i0.ÉµÉµtext(18, \"Reset Database\");\n        i0.ÉµÉµelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ÉµÉµadvance(10);\n        i0.ÉµÉµproperty(\"ngModel\", ctx.listName);\n        i0.ÉµÉµadvance(4);\n        i0.ÉµÉµproperty(\"ngForOf\", ctx.todoLists)(\"ngForTrackBy\", ctx.identifyList);\n      }\n    },\n    dependencies: [i4.NgForOf, i5.DefaultValueAccessor, i5.NgControlStatus, i5.NgModel, i6.ItemListComponent],\n    styles: [\".newListContainer[_ngcontent-%COMP%]{margin-top:30px;padding-bottom:20px;border-bottom:1px dashed #504f4f}.btnSynchro[_ngcontent-%COMP%]{text-align:center;margin-top:10px}.btnSynchro[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{margin:0 5px}\"],\n    changeDetection: 0\n  });\n  return HomeComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}