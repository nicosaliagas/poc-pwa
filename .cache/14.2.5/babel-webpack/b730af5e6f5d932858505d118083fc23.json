{"ast":null,"code":"import { ApplicationRef } from '@angular/core';\nimport { concat, interval } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/service-worker\";\nexport class CheckForUpdateService {\n  constructor(appRef, updates) {\n    // Allow the app to stabilize first, before starting\n    // polling for updates with `interval()`.\n    const appIsStable$ = appRef.isStable.pipe(first(isStable => isStable === true)); // const everySixHours$ = interval(6 * 60 * 60 * 1000);\n\n    const everySixHours$ = interval(5 * 1000);\n    const everySixHoursOnceAppIsStable$ = concat(appIsStable$, everySixHours$); // everySixHoursOnceAppIsStable$.subscribe(async () => {\n    //     try {\n    //         const updateFound = await updates.checkForUpdate();\n    //         console.log(updateFound ? 'A new version is available.' : 'Already on the latest version.');\n    //     } catch (err) {\n    //         console.error('Failed to check for updates:', err);\n    //     }\n    // });\n  }\n\n}\n\nCheckForUpdateService.ɵfac = function CheckForUpdateService_Factory(t) {\n  return new (t || CheckForUpdateService)(i0.ɵɵinject(i0.ApplicationRef), i0.ɵɵinject(i1.SwUpdate));\n};\n\nCheckForUpdateService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CheckForUpdateService,\n  factory: CheckForUpdateService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAASA,cAAT,QAA2C,eAA3C;AAEA,SAASC,MAAT,EAAiBC,QAAjB,QAAiC,MAAjC;AACA,SAASC,KAAT,QAAsB,gBAAtB;;;AAKA,OAAM,MAAOC,qBAAP,CAA4B;EAE9BC,YAAYC,MAAZ,EAAoCC,OAApC,EAAqD;IACjD;IACA;IACA,MAAMC,YAAY,GAAGF,MAAM,CAACG,QAAP,CAAgBC,IAAhB,CAAqBP,KAAK,CAACM,QAAQ,IAAIA,QAAQ,KAAK,IAA1B,CAA1B,CAArB,CAHiD,CAIjD;;IACA,MAAME,cAAc,GAAGT,QAAQ,CAAC,IAAI,IAAL,CAA/B;IACA,MAAMU,6BAA6B,GAAGX,MAAM,CAACO,YAAD,EAAeG,cAAf,CAA5C,CANiD,CAQjD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACH;;AAlB6B;;;mBAArBP,uBAAqBS;AAAA;;;SAArBT;EAAqBU,SAArBV,qBAAqB;EAAAW,YAFlB","names":["ApplicationRef","concat","interval","first","CheckForUpdateService","constructor","appRef","updates","appIsStable$","isStable","pipe","everySixHours$","everySixHoursOnceAppIsStable$","i0","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\nicos\\Dev\\poc\\poc-pwa\\src\\services\\check-for-update.service.ts"],"sourcesContent":["import { ApplicationRef, Injectable } from '@angular/core';\r\nimport { SwUpdate } from '@angular/service-worker';\r\nimport { concat, interval } from 'rxjs';\r\nimport { first } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class CheckForUpdateService {\r\n\r\n    constructor(appRef: ApplicationRef, updates: SwUpdate) {\r\n        // Allow the app to stabilize first, before starting\r\n        // polling for updates with `interval()`.\r\n        const appIsStable$ = appRef.isStable.pipe(first(isStable => isStable === true));\r\n        // const everySixHours$ = interval(6 * 60 * 60 * 1000);\r\n        const everySixHours$ = interval(5 * 1000);\r\n        const everySixHoursOnceAppIsStable$ = concat(appIsStable$, everySixHours$);\r\n\r\n        // everySixHoursOnceAppIsStable$.subscribe(async () => {\r\n        //     try {\r\n        //         const updateFound = await updates.checkForUpdate();\r\n        //         console.log(updateFound ? 'A new version is available.' : 'Already on the latest version.');\r\n        //     } catch (err) {\r\n        //         console.error('Failed to check for updates:', err);\r\n        //     }\r\n        // });\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}