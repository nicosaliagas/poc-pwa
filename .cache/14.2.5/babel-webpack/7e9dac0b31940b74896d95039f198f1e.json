{"ast":null,"code":"import { liveQuery } from 'dexie';\nimport { forkJoin, from, map, switchMap } from 'rxjs';\nimport { db, ISynchroRecordType } from './db';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./crud-api.service\";\nexport let SynchroService = /*#__PURE__*/(() => {\n  class SynchroService {\n    constructor(crudApiService) {\n      this.crudApiService = crudApiService;\n    }\n\n    serverToIndexedDB(lists) {\n      lists.forEach(list => {\n        /** cr√©ation des listes */\n        db.todoLists.add({\n          title: list.title\n        }).then(id => {\n          list.todoItems?.forEach(item => {\n            if (item.title) {\n              /** cr√©ation des items pour chaque liste */\n              db.todoItems.add({\n                title: item.title,\n                todoListId: id\n              });\n            }\n          });\n        });\n      });\n    }\n\n    indexedDBToServer() {\n      return from(liveQuery(() => db.todoLists.where({\n        recordType: ISynchroRecordType.ADD\n      }).toArray())).pipe(map(listsToAdd => listsToAdd.map(data => {\n        const listeName = data.title;\n        return this.crudApiService.NewListRessouce(listeName).subscribe(_ => {\n          return from(liveQuery(() => db.todoItems.where({\n            todoListId: data.id,\n            recordType: ISynchroRecordType.ADD\n          }).toArray())).pipe(map(itemsToAdd => itemsToAdd.map(todoItem => {\n            return this.crudApiService.NewListRessouce(listeName, todoItem.title).subscribe(_ => {\n              console.log(\"todoItem ajout√© \", todoItem.title, \"dans la liste \", listeName);\n            });\n          })));\n        });\n      })), switchMap(newListsObservables => {\n        console.log(\"newListsObservables >>> \", newListsObservables);\n        return forkJoin(newListsObservables);\n      }));\n      /** get list to add */\n      // db.todoLists.where({\n      //     recordType: ISynchroRecordType.ADD,\n      // }).toArray().then((listsToAdd: TodoList[]) => {\n      //     listsToAdd.forEach((data: TodoList) => {\n      //         const listeName: string = data.title\n      //         this.crudApiService.NewListRessouce(listeName).subscribe(_ => {\n      //             /** get items to add */\n      //             db.todoItems.where({\n      //                 todoListId: data.id,\n      //                 recordType: ISynchroRecordType.ADD,\n      //             }).toArray().then((itemsToAdd: TodoItem[]) => {\n      //                 /** liste des items d'une todo liste */\n      //                 itemsToAdd.forEach((todoItem: TodoItem) => {\n      //                     this.crudApiService.NewListRessouce(listeName, todoItem.title).pipe(\n      //                     ).subscribe(_ => {\n      //                         console.log(\"todoItem ajout√© \", todoItem.title, \"dans la liste \", listeName)\n      //                     })\n      //                 })\n      //             })\n      //         })\n      //     })\n      // })\n    }\n\n    indexedDBToServer_old() {\n      /** get list array */\n      db.todoLists.toArray().then(datas => {\n        console.log(\"üå∏ datas >>> \", datas);\n        /** each list name */\n\n        datas.forEach(data => {\n          const listeName = data.title;\n          /** create list API */\n\n          console.log(\"list name >>> \", listeName);\n          this.crudApiService.NewListRessouce(listeName).subscribe(datas => {\n            /** get todo items from a list */\n            db.todoItems.where({\n              todoListId: data.id\n            }).toArray().then(todoItems => {\n              console.log(\"todoItems >>> \", todoItems);\n              /** liste des items d'une todo liste */\n\n              todoItems.forEach(todoItem => {\n                this.crudApiService.NewListRessouce(listeName, todoItem.title).pipe().subscribe(() => {\n                  console.log(\"todoItem ajout√© \", todoItem.title, \"dans la liste \", listeName);\n                });\n              });\n            });\n          });\n        });\n      });\n    }\n\n  }\n\n  SynchroService.…µfac = function SynchroService_Factory(t) {\n    return new (t || SynchroService)(i0.…µ…µinject(i1.CrudApiService));\n  };\n\n  SynchroService.…µprov = /*@__PURE__*/i0.…µ…µdefineInjectable({\n    token: SynchroService,\n    factory: SynchroService.…µfac\n  });\n  return SynchroService;\n})();","map":null,"metadata":{},"sourceType":"module"}