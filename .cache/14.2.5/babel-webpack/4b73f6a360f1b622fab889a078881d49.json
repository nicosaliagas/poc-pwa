{"ast":null,"code":"import { liveQuery } from 'dexie';\nimport { forkJoin, from, map, of, switchMap } from 'rxjs';\nimport { db, ISynchroRecordType } from './db';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./crud-api.service\";\nexport let SynchroService = /*#__PURE__*/(() => {\n  class SynchroService {\n    constructor(crudApiService) {\n      this.crudApiService = crudApiService;\n    }\n\n    serverToIndexedDB(lists) {\n      return from(lists).pipe(map(list => {\n        return from(liveQuery(() => db.todoLists.add({\n          title: list.title\n        }))).pipe(map(id => list.todoItems?.map(item => {\n          if (item.title) {\n            /** création des items pour chaque liste */\n            return from(liveQuery(() => db.todoItems.add({\n              title: item.title,\n              todoListId: id\n            }))).subscribe();\n          } else {\n            return of(true);\n          }\n        })));\n      }), switchMap(newListsObservables => {\n        return forkJoin(newListsObservables);\n      })); // lists.forEach((list: TodoList) => {\n      //     /** création des listes */\n      //     db.todoLists.add({\n      //         title: list.title,\n      //     }).then((id: number) => {\n      //         list.todoItems?.forEach((item: TodoItem) => {\n      //             if (item.title) {\n      //                 /** création des items pour chaque liste */\n      //                 db.todoItems.add({\n      //                     title: item.title,\n      //                     todoListId: id,\n      //                 });\n      //             }\n      //         })\n      //     })\n      // })\n    }\n\n    indexedDBToServer() {\n      return from(liveQuery(() => db.todoLists.where({\n        recordType: ISynchroRecordType.ADD\n      }).toArray())).pipe(map(listsToAdd => listsToAdd.map(data => {\n        const listeName = data.title;\n        return from(this.crudApiService.NewListRessouce(listeName).pipe(map(() => true)));\n      })), switchMap(newListsObservables => {\n        console.log(\"rid of adding items\", newListsObservables);\n        return forkJoin(newListsObservables);\n      })); // return from(liveQuery(() => db.todoLists.where({\n      //     recordType: ISynchroRecordType.ADD,\n      // }).toArray())).pipe(\n      //     map((listsToAdd: TodoList[]) => listsToAdd.map((data: TodoList) => {\n      //         const listeName: string = data.title\n      //         return this.crudApiService.NewListRessouce(listeName).pipe(_ => {\n      //             return from(liveQuery(() => db.todoItems.where({\n      //                 todoListId: data.id,\n      //                 recordType: ISynchroRecordType.ADD,\n      //             }).toArray())).pipe(\n      //                 map((itemsToAdd: TodoItem[]) => itemsToAdd.map((todoItem: TodoItem) => {\n      //                     return this.crudApiService.NewListRessouce(listeName, todoItem.title).subscribe(() => true)\n      //                 }))\n      //             )\n      //         })\n      //     })),\n      //     switchMap(newListsObservables => {\n      //         console.log(\"first indexedDBToServer\", newListsObservables)\n      //         return forkJoin(newListsObservables)\n      //     }),\n      // )\n\n      /** good___get list to add */\n      // db.todoLists.where({\n      //     recordType: ISynchroRecordType.ADD,\n      // }).toArray().then((listsToAdd: TodoList[]) => {\n      //     listsToAdd.forEach((data: TodoList) => {\n      //         const listeName: string = data.title\n      //         this.crudApiService.NewListRessouce(listeName).subscribe(_ => {\n      //             /** get items to add */\n      //             db.todoItems.where({\n      //                 todoListId: data.id,\n      //                 recordType: ISynchroRecordType.ADD,\n      //             }).toArray().then((itemsToAdd: TodoItem[]) => {\n      //                 /** liste des items d'une todo liste */\n      //                 itemsToAdd.forEach((todoItem: TodoItem) => {\n      //                     this.crudApiService.NewListRessouce(listeName, todoItem.title).pipe(\n      //                     ).subscribe(_ => {\n      //                         console.log(\"todoItem ajouté \", todoItem.title, \"dans la liste \", listeName)\n      //                     })\n      //                 })\n      //             })\n      //         })\n      //     })\n      // })\n    }\n\n  }\n\n  SynchroService.ɵfac = function SynchroService_Factory(t) {\n    return new (t || SynchroService)(i0.ɵɵinject(i1.CrudApiService));\n  };\n\n  SynchroService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SynchroService,\n    factory: SynchroService.ɵfac\n  });\n  return SynchroService;\n})();","map":null,"metadata":{},"sourceType":"module"}