{"ast":null,"code":"import { HttpClientModule } from '@angular/common/http';\nimport { APP_INITIALIZER } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { ServiceWorkerModule } from '@angular/service-worker';\nimport { LoadEnvironmentFactory } from 'src/services/app-factory';\nimport { CheckForUpdateService } from 'src/services/check-for-update.service';\nimport { HandleUnrecoverableStateService } from 'src/services/handle-unrecoverable-state.service';\nimport { PromptUpdateService } from 'src/services/prompt-update.service';\nimport { environment } from '../environments/environment';\nimport { EnvironmentLoaderService } from '../services/environment-loader.service';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"cocori-ng/src/feature-core\";\nimport * as i2 from \"@angular/service-worker\";\nexport let AppModule = /*#__PURE__*/(() => {\n  class AppModule {\n    constructor(httpService) {\n      this.httpService = httpService;\n      this.httpService.withCredentials = false;\n      console.log(\"ðŸŒ±\", environment);\n    }\n\n  }\n\n  AppModule.Éµfac = function AppModule_Factory(t) {\n    return new (t || AppModule)(i0.ÉµÉµinject(i1.HttpService));\n  };\n\n  AppModule.Éµmod = /*@__PURE__*/i0.ÉµÉµdefineNgModule({\n    type: AppModule,\n    bootstrap: [AppComponent]\n  });\n  AppModule.Éµinj = /*@__PURE__*/i0.ÉµÉµdefineInjector({\n    providers: [{\n      provide: APP_INITIALIZER,\n      useFactory: LoadEnvironmentFactory,\n      deps: [EnvironmentLoaderService, PromptUpdateService, HandleUnrecoverableStateService, CheckForUpdateService],\n      multi: true\n    }],\n    imports: [BrowserModule, HttpClientModule, AppRoutingModule,\n    /** #TODO conditionner avec les variables d'environnement */\n    ServiceWorkerModule.register('ngsw-worker.js', {\n      enabled: environment.production,\n      // Register the ServiceWorker as soon as the application is stable\n      // or after 30 seconds (whichever comes first).\n      registrationStrategy: 'registerWhenStable:30000'\n    })]\n  });\n  return AppModule;\n})();","map":null,"metadata":{},"sourceType":"module"}