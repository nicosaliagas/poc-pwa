{"ast":null,"code":"import { ChangeDetectorRef } from '@angular/core';\nimport { StringService } from 'cocori-ng/src/feature-core';\nimport { from, map, mergeMap, Subject, toArray } from 'rxjs';\nimport { IConnectionStatusValue } from '../../../services/connection-status.service';\nimport { SynchroService } from '../../../services/synchro.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../services/connection-status.service\";\nimport * as i2 from \"src/services/crud-api.service\";\nimport * as i3 from \"../../../services/synchro.service\";\nimport * as i4 from \"../../../services/crud-db.service\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/forms\";\nimport * as i7 from \"./item-list/item-list.component\";\n\nfunction HomeComponent_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.…µ…µelementStart(0, \"div\");\n    i0.…µ…µelement(1, \"item-list\", 7);\n    i0.…µ…µelementEnd();\n  }\n\n  if (rf & 2) {\n    const todoList_r2 = ctx.$implicit;\n    i0.…µ…µadvance(1);\n    i0.…µ…µproperty(\"todoList\", todoList_r2);\n  }\n}\n\nexport let HomeComponent = /*#__PURE__*/(() => {\n  class HomeComponent {\n    constructor(connectionStatusService, crudApiService, synchroService, crudDbService, cdr) {\n      this.connectionStatusService = connectionStatusService;\n      this.crudApiService = crudApiService;\n      this.synchroService = synchroService;\n      this.crudDbService = crudDbService;\n      this.cdr = cdr;\n      this.listName = 'My new list';\n      this.todoLists = [];\n    }\n\n    ngOnInit() {\n      this.connectionStatusService.onConnectionStatutUpdated.subscribe(data => {\n        this.connectionStatus = data;\n        this.readDatas();\n      });\n    }\n\n    readDatas() {\n      this.todoLists = [];\n\n      if (this.connectionStatus === IConnectionStatusValue.ONLINE) {\n        this.getAllTodosListItemsAPI();\n      } else {\n        this.getAllTodosListItemsIndexedDb();\n      }\n    }\n\n    getAllTodosListItemsIndexedDb() {\n      this.todoLists = [];\n      this.crudDbService.getRecords().subscribe(datas => {\n        this.todoLists = datas;\n        this.cdr.detectChanges();\n      });\n      this.cdr.detectChanges();\n    }\n\n    getAllTodosListItemsAPI() {\n      var subject = new Subject();\n      /** all the lists created */\n\n      this.crudApiService.GetCrucrudInfos('').pipe(mergeMap(lists => // `from` emits each contact separately\n      from(lists).pipe( // load each contact\n      mergeMap(list => this.getListTodoItems(list)), // collect all contacts into an array\n      toArray(), // add the newly fetched data to original result\n      map(todoLists => ({ ...this.todoLists,\n        todoLists\n      }))))).subscribe(datas => {\n        this.todoLists = datas.todoLists;\n        this.cdr.detectChanges();\n        subject.next(datas.todoLists);\n      });\n      return subject.asObservable();\n    }\n    /**\r\n     * It takes a list name as a parameter, calls the GetCrucrudInfos function from the crudApiService,\r\n     * and then maps the result to an object with a title and todoItems property.\r\n     * @param {string} listName - string - the name of the list you want to get the items from\r\n     * @returns An Observable of type { title: string, todoItems: any[] }\r\n     */\n\n\n    getListTodoItems(listName) {\n      return this.crudApiService.GetCrucrudInfos(listName).pipe(map(todoItems => ({\n        title: listName,\n        todoItems: todoItems\n      })));\n    }\n\n    addNewList() {\n      this.listName = new StringService(this.listName).removeAllSpaces().removeAllSpecialsCharacters().replaceAllAccentByNonAccentCharacters().toString();\n\n      if (this.connectionStatus === IConnectionStatusValue.ONLINE) {\n        this.crudApiService.NewListRessouce(this.listName).pipe().subscribe(datas => {\n          this.readDatas();\n        });\n      } else {\n        this.crudDbService.addList(this.listName).subscribe(() => {\n          this.readDatas();\n        });\n      }\n    }\n\n    resetDatabase() {\n      this.crudDbService.resetDatabase();\n    }\n\n    identifyList(index, list) {\n      return `${list.id}${list.title}`;\n    }\n\n    sychronize() {\n      if (this.connectionStatus === IConnectionStatusValue.ONLINE) {\n        /** test */\n        this.synchroService.serverToIndexedDB(this.todoLists);\n        /* .subscribe(() => {\r\n        console.log(\"üí™ synchro Server To local\")\r\n        }) */\n\n        /** reste la synchro serverToIndexedDB */\n\n        /** synchronise local to server */\n        // this.synchroService.indexedDBToServer().subscribe((datas: any) => {\n        //   console.log(\"üí™ synchronise local to server\")\n        //   this.crudDbService.resetDatabase().subscribe(() => {\n        //     console.log(\"üí™ reset local database\")\n        //     /** r√©cup√®re toutes les datas du serveurs */\n        //     this.getAllTodosListItemsAPI().subscribe((datas) => {\n        //       console.log(\"üí™ r√©cup√®re toutes les datas du serveurs\")\n        //       this.synchroService.serverToIndexedDB(this.todoLists).subscribe(() => {\n        //         console.log(\"üí™ synchro Server To local\")\n        //         /** refresh liste */\n        //         this.readDatas()\n        //       })\n        //     })\n        //   })\n        // })\n\n        /** ancien codes pas optimis√©s */\n        // setTimeout(() => {\n        //   /** reset local database */\n        //   console.log(\"üí™ reset local database\")\n        //   // this.resetDatabase().then(() => {\n        //   this.crudDbService.resetDatabase().subscribe(() => {\n        //     /** synchro Server To local  */\n        //     console.log(\"üí™ synchro Server To local\")\n        //     this.getAllTodosListItemsAPI()\n        //     setTimeout(() => {\n        //       this.synchroService.serverToIndexedDB(this.todoLists)\n        //       setTimeout(() => {\n        //         /** refresh liste */\n        //         this.readDatas()\n        //       }, 1000)\n        //     }, 1000)\n        //   })\n        // }, 1000);\n      } else {\n        window.alert(\"Vous devez √™tre connect√© au r√©seau pour synchroniser les donn√©es de l'application.\");\n      }\n    }\n\n  }\n\n  HomeComponent.…µfac = function HomeComponent_Factory(t) {\n    return new (t || HomeComponent)(i0.…µ…µdirectiveInject(i1.ConnectionStatusService), i0.…µ…µdirectiveInject(i2.CrudApiService), i0.…µ…µdirectiveInject(i3.SynchroService), i0.…µ…µdirectiveInject(i4.CrudDbService), i0.…µ…µdirectiveInject(i0.ChangeDetectorRef));\n  };\n\n  HomeComponent.…µcmp = /*@__PURE__*/i0.…µ…µdefineComponent({\n    type: HomeComponent,\n    selectors: [[\"page-home\"]],\n    features: [i0.…µ…µProvidersFeature([SynchroService])],\n    decls: 17,\n    vars: 3,\n    consts: [[1, \"btnSynchro\"], [\"type\", \"submit\", 3, \"click\"], [1, \"newListContainer\", 2, \"margin-top\", \"30px\"], [\"autocomplete\", \"off\", \"type\", \"text\", \"id\", \"name\", 3, \"ngModel\", \"ngModelChange\"], [\"name\", \"\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"click\"], [3, \"todoList\"]],\n    template: function HomeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.…µ…µelementStart(0, \"div\", 0)(1, \"button\", 1);\n        i0.…µ…µlistener(\"click\", function HomeComponent_Template_button_click_1_listener() {\n          return ctx.sychronize();\n        });\n        i0.…µ…µtext(2, \"\\uD83D\\uDD01 Synchroniser\");\n        i0.…µ…µelementEnd()();\n        i0.…µ…µelementStart(3, \"div\", 2)(4, \"h3\");\n        i0.…µ…µtext(5, \"New List : \");\n        i0.…µ…µelementEnd();\n        i0.…µ…µelementStart(6, \"label\");\n        i0.…µ…µtext(7, \" List : \");\n        i0.…µ…µelementStart(8, \"input\", 3, 4);\n        i0.…µ…µlistener(\"ngModelChange\", function HomeComponent_Template_input_ngModelChange_8_listener($event) {\n          return ctx.listName = $event;\n        });\n        i0.…µ…µelementEnd()();\n        i0.…µ…µelementStart(10, \"button\", 1);\n        i0.…µ…µlistener(\"click\", function HomeComponent_Template_button_click_10_listener() {\n          return ctx.addNewList();\n        });\n        i0.…µ…µtext(11, \"Add new list\");\n        i0.…µ…µelementEnd()();\n        i0.…µ…µtemplate(12, HomeComponent_div_12_Template, 2, 1, \"div\", 5);\n        i0.…µ…µelementStart(13, \"h3\");\n        i0.…µ…µtext(14, \"Reset the Database\");\n        i0.…µ…µelementEnd();\n        i0.…µ…µelementStart(15, \"button\", 6);\n        i0.…µ…µlistener(\"click\", function HomeComponent_Template_button_click_15_listener() {\n          return ctx.resetDatabase();\n        });\n        i0.…µ…µtext(16, \"Reset Database\");\n        i0.…µ…µelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.…µ…µadvance(8);\n        i0.…µ…µproperty(\"ngModel\", ctx.listName);\n        i0.…µ…µadvance(4);\n        i0.…µ…µproperty(\"ngForOf\", ctx.todoLists)(\"ngForTrackBy\", ctx.identifyList);\n      }\n    },\n    dependencies: [i5.NgForOf, i6.DefaultValueAccessor, i6.NgControlStatus, i6.NgModel, i7.ItemListComponent],\n    styles: [\".newListContainer[_ngcontent-%COMP%]{margin-top:30px;padding-bottom:20px;border-bottom:1px dashed #504f4f}.btnSynchro[_ngcontent-%COMP%]{text-align:center;margin-top:10px}.btnSynchro[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{margin:0 5px}\"],\n    changeDetection: 0\n  });\n  return HomeComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}