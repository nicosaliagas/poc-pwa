{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/nicos/Dev/poc/poc-pwa/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { liveQuery } from 'dexie';\nimport { from, map, mergeMap, toArray } from 'rxjs';\nimport { db } from 'src/services/db';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/services/crud-api.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"./item-list/item-list.component\";\n\nfunction HomeComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ÉµÉµelementStart(0, \"div\");\n    i0.ÉµÉµelement(1, \"item-list\", 6);\n    i0.ÉµÉµelementEnd();\n  }\n\n  if (rf & 2) {\n    const todoList_r2 = ctx.$implicit;\n    i0.ÉµÉµadvance(1);\n    i0.ÉµÉµproperty(\"todoList\", todoList_r2);\n  }\n}\n\nexport class HomeComponent {\n  constructor(crudApiService) {\n    this.crudApiService = crudApiService;\n    this.todoLists$ = liveQuery(() => db.todoLists.toArray());\n    this.listName = 'My new list';\n    this.lists = [];\n  }\n\n  ngOnInit() {\n    // from([1,2,3,4]).pipe(\n    //   mergeMap(param => this.getListTodos(param))\n    // ).subscribe(val => console.log(val));\n\n    /** all the lists created */\n    this.crudApiService.GetCrucrudInfos('').pipe(mergeMap(lists => // `from` emits each contact separately\n    from(lists).pipe( // load each contact\n    mergeMap(list => this.getListTodos(list)), // collect all contacts into an array\n    toArray(), // add the newly fetched data to original result\n    map(list => ({ ...this.lists,\n      list\n    }))))).subscribe(datas => {\n      console.log(\"datas >>>>>>>>>>> \", datas);\n    });\n  }\n\n  getListTodos(list) {\n    var obj = {};\n    console.log(\"list >> \", list); // return of(`retrieved new data with param ${list}`).pipe(\n    //   delay(1000)\n    // )\n\n    return this.crudApiService.GetCrucrudInfos(list).pipe(map(datas => {\n      console.log(\"ðŸ’© \", list);\n      return obj.list = datas;\n    }) // return ({name: datas})})\n    );\n  }\n\n  addNewList() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      yield db.todoLists.add({\n        title: _this.listName\n      });\n\n      _this.crudApiService.NewRessouce(_this.listName).pipe().subscribe(datas => {\n        console.log(\"datas >>> \", datas);\n      });\n    })();\n  }\n\n  resetDatabase() {\n    return _asyncToGenerator(function* () {\n      yield db.resetDatabase();\n    })();\n  }\n\n  identifyList(index, list) {\n    return `${list.id}${list.title}`;\n  }\n\n}\n\nHomeComponent.Éµfac = function HomeComponent_Factory(t) {\n  return new (t || HomeComponent)(i0.ÉµÉµdirectiveInject(i1.CrudApiService));\n};\n\nHomeComponent.Éµcmp = /*@__PURE__*/i0.ÉµÉµdefineComponent({\n  type: HomeComponent,\n  selectors: [[\"page-home\"]],\n  decls: 15,\n  vars: 5,\n  consts: [[1, \"newListContainer\", 2, \"margin-top\", \"30px\"], [\"autocomplete\", \"off\", \"type\", \"text\", \"id\", \"name\", 3, \"ngModel\", \"ngModelChange\"], [\"name\", \"\"], [\"type\", \"submit\", 3, \"click\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"click\"], [3, \"todoList\"]],\n  template: function HomeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ÉµÉµelementStart(0, \"div\", 0)(1, \"h3\");\n      i0.ÉµÉµtext(2, \"New List : \");\n      i0.ÉµÉµelementEnd();\n      i0.ÉµÉµelementStart(3, \"label\");\n      i0.ÉµÉµtext(4, \" List : \");\n      i0.ÉµÉµelementStart(5, \"input\", 1, 2);\n      i0.ÉµÉµlistener(\"ngModelChange\", function HomeComponent_Template_input_ngModelChange_5_listener($event) {\n        return ctx.listName = $event;\n      });\n      i0.ÉµÉµelementEnd()();\n      i0.ÉµÉµelementStart(7, \"button\", 3);\n      i0.ÉµÉµlistener(\"click\", function HomeComponent_Template_button_click_7_listener() {\n        return ctx.addNewList();\n      });\n      i0.ÉµÉµtext(8, \"Add new list\");\n      i0.ÉµÉµelementEnd()();\n      i0.ÉµÉµtemplate(9, HomeComponent_div_9_Template, 2, 1, \"div\", 4);\n      i0.ÉµÉµpipe(10, \"async\");\n      i0.ÉµÉµelementStart(11, \"h3\");\n      i0.ÉµÉµtext(12, \"Reset the Database\");\n      i0.ÉµÉµelementEnd();\n      i0.ÉµÉµelementStart(13, \"button\", 5);\n      i0.ÉµÉµlistener(\"click\", function HomeComponent_Template_button_click_13_listener() {\n        return ctx.resetDatabase();\n      });\n      i0.ÉµÉµtext(14, \"Reset Database\");\n      i0.ÉµÉµelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ÉµÉµadvance(5);\n      i0.ÉµÉµproperty(\"ngModel\", ctx.listName);\n      i0.ÉµÉµadvance(4);\n      i0.ÉµÉµproperty(\"ngForOf\", i0.ÉµÉµpipeBind1(10, 3, ctx.todoLists$))(\"ngForTrackBy\", ctx.identifyList);\n    }\n  },\n  dependencies: [i2.NgForOf, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgModel, i4.ItemListComponent, i2.AsyncPipe],\n  styles: [\".newListContainer[_ngcontent-%COMP%] {\\n  margin-top: 30px;\\n  padding-bottom: 20px;\\n  border-bottom: 1px dashed #504f4f;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhvbWUuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxnQkFBQTtFQUNBLG9CQUFBO0VBQ0EsaUNBQUE7QUFDSiIsImZpbGUiOiJob21lLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLm5ld0xpc3RDb250YWluZXIge1xyXG4gICAgbWFyZ2luLXRvcDogMzBweDtcclxuICAgIHBhZGRpbmctYm90dG9tOiAyMHB4O1xyXG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IGRhc2hlZCAjNTA0ZjRmO1xyXG59Il19 */\"],\n  changeDetection: 0\n});","map":{"version":3,"mappings":";AACA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,IAAT,EAAeC,GAAf,EAAoBC,QAApB,EAA8BC,OAA9B,QAA6C,MAA7C;AAEA,SAASC,EAAT,QAA6B,iBAA7B;;;;;;;;;ICKAC;IACIA;IACJA;;;;;IADeA;IAAAA;;;;ADEf,OAAM,MAAOC,aAAP,CAAoB;EAKxBC,YAAoBC,cAApB,EAAkD;IAA9B;IAJpB,kBAAaT,SAAS,CAAC,MAAMK,EAAE,CAACK,SAAH,CAAaN,OAAb,EAAP,CAAtB;IACA,gBAAW,aAAX;IACA,aAAkB,EAAlB;EAEuD;;EAEvDO,QAAQ;IAEN;IACA;IACA;;IAEA;IACA,KAAKF,cAAL,CAAoBG,eAApB,CAAoC,EAApC,EAAwCC,IAAxC,CACEV,QAAQ,CAAEW,KAAD,IACP;IACAb,IAAI,CAACa,KAAD,CAAJ,CAAYD,IAAZ,EACE;IACAV,QAAQ,CAAEY,IAAD,IAAkB,KAAKC,YAAL,CAAkBD,IAAlB,CAAnB,CAFV,EAGE;IACAX,OAAO,EAJT,EAKE;IACAF,GAAG,CAACa,IAAI,KAAK,EAAE,GAAG,KAAKD,KAAV;MAAiBC;IAAjB,CAAL,CAAL,CANL,CAFM,CADV,EAWEE,SAXF,CAWaC,KAAD,IAAU;MACpBC,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCF,KAAlC;IACD,CAbD;EAcD;;EAEOF,YAAY,CAACD,IAAD,EAAa;IAC/B,IAAIM,GAAG,GAAQ,EAAf;IAEAF,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBL,IAAxB,EAH+B,CAI/B;IACA;IACA;;IAEA,OAAO,KAAKN,cAAL,CAAoBG,eAApB,CAAoCG,IAApC,EAA0CF,IAA1C,CACLX,GAAG,CAACgB,KAAK,IAAG;MACVC,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBL,IAAnB;MACA,OAAOM,GAAG,CAACN,IAAJ,GAAWG,KAAlB;IACD,CAHE,CADE,CAKH;IALG,CAAP;EAOD;;EAEKI,UAAU;IAAA;;IAAA;MACd,MAAMjB,EAAE,CAACK,SAAH,CAAaa,GAAb,CAAiB;QACrBC,KAAK,EAAE,KAAI,CAACC;MADS,CAAjB,CAAN;;MAIA,KAAI,CAAChB,cAAL,CAAoBiB,WAApB,CAAgC,KAAI,CAACD,QAArC,EAA+CZ,IAA/C,GACEI,SADF,CACaC,KAAD,IAAe;QACzBC,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,KAA1B;MACD,CAHD;IALc;EASf;;EAEKS,aAAa;IAAA;MACjB,MAAMtB,EAAE,CAACsB,aAAH,EAAN;IADiB;EAElB;;EAEDC,YAAY,CAACC,KAAD,EAAgBd,IAAhB,EAA8B;IACxC,OAAO,GAAGA,IAAI,CAACe,EAAE,GAAGf,IAAI,CAACS,KAAK,EAA9B;EACD;;AAhEuB;;;mBAAbjB,eAAaD;AAAA;;;QAAbC;EAAawB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCZ1B7B,+BAAwD,CAAxD,EAAwD,IAAxD;MACQA;MAAWA;MACfA;MACIA;MACAA;MAAsDA;QAAA;MAAA;MAAtDA;MAEJA;MAAsBA;QAAA,OAAS8B,gBAAT;MAAqB,CAArB;MAAuB9B;MAAYA;MAG7DA;;MAIAA;MAAIA;MAAkBA;MACtBA;MAAQA;QAAA,OAAS8B,mBAAT;MAAwB,CAAxB;MAA0B9B;MAAcA;;;;MAVcA;MAAAA;MAKpCA;MAAAA,gEAAuB,cAAvB,EAAuB8B,gBAAvB","names":["liveQuery","from","map","mergeMap","toArray","db","i0","HomeComponent","constructor","crudApiService","todoLists","ngOnInit","GetCrucrudInfos","pipe","lists","list","getListTodos","subscribe","datas","console","log","obj","addNewList","add","title","listName","NewRessouce","resetDatabase","identifyList","index","id","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\nicos\\Dev\\poc\\poc-pwa\\src\\app\\pages\\home\\home.component.ts","C:\\Users\\nicos\\Dev\\poc\\poc-pwa\\src\\app\\pages\\home\\home.component.html"],"sourcesContent":["import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { liveQuery } from 'dexie';\r\nimport { from, map, mergeMap, toArray } from 'rxjs';\r\nimport { CrudApiService } from 'src/services/crud-api.service';\r\nimport { db, TodoList } from 'src/services/db';\r\n\r\n@Component({\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  selector: 'page-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.scss'],\r\n})\r\nexport class HomeComponent implements OnInit {\r\n  todoLists$ = liveQuery(() => db.todoLists.toArray());\r\n  listName = 'My new list';\r\n  lists: string[] = [];\r\n\r\n  constructor(private crudApiService: CrudApiService) { }\r\n\r\n  ngOnInit(): void {\r\n\r\n    // from([1,2,3,4]).pipe(\r\n    //   mergeMap(param => this.getListTodos(param))\r\n    // ).subscribe(val => console.log(val));\r\n\r\n    /** all the lists created */\r\n    this.crudApiService.GetCrucrudInfos('').pipe(\r\n      mergeMap((lists: string[]) =>\r\n        // `from` emits each contact separately\r\n        from(lists).pipe(\r\n          // load each contact\r\n          mergeMap((list: string) => this.getListTodos(list)),\r\n          // collect all contacts into an array\r\n          toArray(),\r\n          // add the newly fetched data to original result\r\n          map(list => ({ ...this.lists, list })),\r\n        ))\r\n    ).subscribe((datas) => {\r\n      console.log(\"datas >>>>>>>>>>> \", datas)\r\n    })\r\n  }\r\n\r\n  private getListTodos(list: string) {\r\n    var obj: any = {};\r\n\r\n    console.log(\"list >> \", list)\r\n    // return of(`retrieved new data with param ${list}`).pipe(\r\n    //   delay(1000)\r\n    // )\r\n\r\n    return this.crudApiService.GetCrucrudInfos(list).pipe(\r\n      map(datas => {\r\n        console.log(\"ðŸ’© \", list)\r\n        return obj.list = datas\r\n      })\r\n        // return ({name: datas})})\r\n    )\r\n  }\r\n\r\n  async addNewList() {\r\n    await db.todoLists.add({\r\n      title: this.listName,\r\n    });\r\n\r\n    this.crudApiService.NewRessouce(this.listName).pipe(\r\n    ).subscribe((datas: any) => {\r\n      console.log(\"datas >>> \", datas)\r\n    })\r\n  }\r\n\r\n  async resetDatabase() {\r\n    await db.resetDatabase();\r\n  }\r\n\r\n  identifyList(index: number, list: TodoList) {\r\n    return `${list.id}${list.title}`;\r\n  }\r\n}\r\n","<div class=\"newListContainer\" style=\"margin-top: 30px;\">\r\n    <h3>New List : </h3>\r\n    <label>\r\n        List :\r\n        <input autocomplete=\"off\" type=\"text\" id=\"name\" #name [(ngModel)]=\"listName\" />\r\n    </label>\r\n    <button type=\"submit\" (click)=\"addNewList()\">Add new list</button>\r\n</div>\r\n\r\n<div *ngFor=\"let todoList of todoLists$ | async; trackBy: identifyList\">\r\n    <item-list [todoList]=\"todoList\"></item-list>\r\n</div>\r\n\r\n<h3>Reset the Database</h3>\r\n<button (click)=\"resetDatabase()\">Reset Database</button>"]},"metadata":{},"sourceType":"module"}