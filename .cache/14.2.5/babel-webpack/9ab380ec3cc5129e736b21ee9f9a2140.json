{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/nicos/Dev/poc/poc-pwa/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { firstValueFrom } from 'rxjs';\nimport { db, ISynchroRecordType } from './db';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./crud-api.service\";\nexport class SynchroService {\n  constructor(crudApiService) {\n    this.crudApiService = crudApiService;\n  }\n\n  serverToIndexedDB(listsToAdd) {\n    return _asyncToGenerator(function* () {\n      yield Promise.all(listsToAdd.map( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (list) {\n          const idListAdded = yield db.todoLists.add({\n            title: list.title\n          });\n\n          if (list.todoItems?.length) {\n            yield Promise.all(list.todoItems.map( /*#__PURE__*/function () {\n              var _ref2 = _asyncToGenerator(function* (item) {\n                if (item.title) {\n                  yield db.todoItems.add({\n                    title: item.title,\n                    todoListId: idListAdded\n                  });\n                } else {\n                  yield 1;\n                }\n              });\n\n              return function (_x2) {\n                return _ref2.apply(this, arguments);\n              };\n            }()));\n          }\n        });\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()));\n    })();\n  }\n\n  indexedDBToServer() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const listsToAdd = yield db.todoLists.where({\n        recordType: ISynchroRecordType.ADD\n      }).toArray();\n      yield Promise.all(listsToAdd.map( /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator(function* (list) {\n          const listeName = list.title;\n          yield firstValueFrom(_this.crudApiService.NewListRessouce(listeName));\n          const listItemsToAdd = yield db.todoItems.where({\n            todoListId: list.id,\n            recordType: ISynchroRecordType.ADD\n          }).toArray();\n          yield Promise.all(listItemsToAdd.map( /*#__PURE__*/function () {\n            var _ref4 = _asyncToGenerator(function* (item) {\n              yield firstValueFrom(_this.crudApiService.NewListRessouce(listeName, item.title));\n            });\n\n            return function (_x4) {\n              return _ref4.apply(this, arguments);\n            };\n          }()));\n        });\n\n        return function (_x3) {\n          return _ref3.apply(this, arguments);\n        };\n      }()));\n    })();\n  }\n\n}\n\nSynchroService.ɵfac = function SynchroService_Factory(t) {\n  return new (t || SynchroService)(i0.ɵɵinject(i1.CrudApiService));\n};\n\nSynchroService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SynchroService,\n  factory: SynchroService.ɵfac\n});","map":{"version":3,"mappings":";AACA,SAASA,cAAT,QAA+B,MAA/B;AAGA,SAASC,EAAT,EAAaC,kBAAb,QAA2D,MAA3D;;;AAGA,OAAM,MAAOC,cAAP,CAAqB;EAEvBC,YAAoBC,cAApB,EAAkD;IAA9B;EAAmC;;EAEjDC,iBAAiB,CAACC,UAAD,EAAuB;IAAA;MAC1C,MAAMC,OAAO,CAACC,GAAR,CAAYF,UAAU,CAACG,GAAX;QAAA,6BAAe,WAAOC,IAAP,EAAyB;UAEtD,MAAMC,WAAW,SAAiBX,EAAE,CAACY,SAAH,CAAaC,GAAb,CAAiB;YAC/CC,KAAK,EAAEJ,IAAI,CAACI;UADmC,CAAjB,CAAlC;;UAIA,IAAIJ,IAAI,CAACK,SAAL,EAAgBC,MAApB,EAA4B;YACxB,MAAMT,OAAO,CAACC,GAAR,CAAYE,IAAI,CAACK,SAAL,CAAeN,GAAf;cAAA,8BAAmB,WAAOQ,IAAP,EAAyB;gBAC1D,IAAIA,IAAI,CAACH,KAAT,EAAgB;kBAEZ,MAAMd,EAAE,CAACe,SAAH,CAAaF,GAAb,CAAiB;oBACnBC,KAAK,EAAEG,IAAI,CAACH,KADO;oBAEnBI,UAAU,EAAEP;kBAFO,CAAjB,CAAN;gBAIH,CAND,MAMO;kBACH,MAAM,CAAN;gBACH;cACJ,CAViB;;cAAA;gBAAA;cAAA;YAAA,IAAZ,CAAN;UAWH;QACJ,CAnBiB;;QAAA;UAAA;QAAA;MAAA,IAAZ,CAAN;IAD0C;EAqB7C;;EAEKQ,iBAAiB;IAAA;;IAAA;MACnB,MAAMb,UAAU,SAAqBN,EAAE,CAACY,SAAH,CAAaQ,KAAb,CAAmB;QACpDC,UAAU,EAAEpB,kBAAkB,CAACqB;MADqB,CAAnB,EAElCC,OAFkC,EAArC;MAIA,MAAMhB,OAAO,CAACC,GAAR,CAAYF,UAAU,CAACG,GAAX;QAAA,8BAAe,WAAOC,IAAP,EAAyB;UACtD,MAAMc,SAAS,GAAWd,IAAI,CAACI,KAA/B;UAEA,MAAMf,cAAc,CAAC,KAAI,CAACK,cAAL,CAAoBqB,eAApB,CAAoCD,SAApC,CAAD,CAApB;UAEA,MAAME,cAAc,SAAqB1B,EAAE,CAACe,SAAH,CAAaK,KAAb,CAAmB;YACxDF,UAAU,EAAER,IAAI,CAACiB,EADuC;YAExDN,UAAU,EAAEpB,kBAAkB,CAACqB;UAFyB,CAAnB,EAGtCC,OAHsC,EAAzC;UAKA,MAAMhB,OAAO,CAACC,GAAR,CAAYkB,cAAc,CAACjB,GAAf;YAAA,8BAAmB,WAAOQ,IAAP,EAAyB;cAC1D,MAAMlB,cAAc,CAAC,KAAI,CAACK,cAAL,CAAoBqB,eAApB,CAAoCD,SAApC,EAA+CP,IAAI,CAACH,KAApD,CAAD,CAApB;YACH,CAFiB;;YAAA;cAAA;YAAA;UAAA,IAAZ,CAAN;QAGH,CAbiB;;QAAA;UAAA;QAAA;MAAA,IAAZ,CAAN;IALmB;EAmBtB;;AA9CsB;;;mBAAdZ,gBAAc0B;AAAA;;;SAAd1B;EAAc2B,SAAd3B,cAAc","names":["firstValueFrom","db","ISynchroRecordType","SynchroService","constructor","crudApiService","serverToIndexedDB","listsToAdd","Promise","all","map","list","idListAdded","todoLists","add","title","todoItems","length","item","todoListId","indexedDBToServer","where","recordType","ADD","toArray","listeName","NewListRessouce","listItemsToAdd","id","i0","factory"],"sourceRoot":"","sources":["C:\\Users\\nicos\\Dev\\poc\\poc-pwa\\src\\services\\synchro.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { firstValueFrom } from 'rxjs';\r\n\r\nimport { CrudApiService } from './crud-api.service';\r\nimport { db, ISynchroRecordType, TodoItem, TodoList } from './db';\r\n\r\n@Injectable()\r\nexport class SynchroService {\r\n\r\n    constructor(private crudApiService: CrudApiService) { }\r\n\r\n    async serverToIndexedDB(listsToAdd: TodoList[]): Promise<any> {\r\n        await Promise.all(listsToAdd.map(async (list: TodoList) => {\r\n\r\n            const idListAdded: number = await db.todoLists.add({\r\n                title: list.title,\r\n            })\r\n\r\n            if (list.todoItems?.length) {\r\n                await Promise.all(list.todoItems.map(async (item: TodoItem) => {\r\n                    if (item.title) {\r\n                        \r\n                        await db.todoItems.add({\r\n                            title: item.title,\r\n                            todoListId: idListAdded,\r\n                        })\r\n                    } else {\r\n                        await 1\r\n                    }\r\n                }))\r\n            }\r\n        }))\r\n    }\r\n\r\n    async indexedDBToServer() {\r\n        const listsToAdd: TodoList[] = await db.todoLists.where({\r\n            recordType: ISynchroRecordType.ADD,\r\n        }).toArray()\r\n\r\n        await Promise.all(listsToAdd.map(async (list: TodoList) => {\r\n            const listeName: string = list.title\r\n\r\n            await firstValueFrom(this.crudApiService.NewListRessouce(listeName))\r\n\r\n            const listItemsToAdd: TodoList[] = await db.todoItems.where({\r\n                todoListId: list.id,\r\n                recordType: ISynchroRecordType.ADD,\r\n            }).toArray()\r\n\r\n            await Promise.all(listItemsToAdd.map(async (item: TodoItem) => {\r\n                await firstValueFrom(this.crudApiService.NewListRessouce(listeName, item.title))\r\n            }));\r\n        }));\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}