{"ast":null,"code":"import { ChangeDetectorRef } from '@angular/core';\nimport { SynchroService } from '../../../services/synchro.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../services/connection-status.service\";\nimport * as i2 from \"../../../services/datasets.service\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/common\";\n\nfunction ReadonlyComponent_option_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 7);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const country_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngValue\", country_r1._id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(country_r1.name);\n  }\n}\n\nexport class ReadonlyComponent {\n  constructor(connectionStatusService, datasetsService, fb, cdr) {\n    this.connectionStatusService = connectionStatusService;\n    this.datasetsService = datasetsService;\n    this.fb = fb;\n    this.cdr = cdr;\n    this.$countries = this.datasetsService.GetListCountries();\n    this.country_name = \"\";\n    this.set_country = \"\";\n    this.countries = [{\n      id: 1,\n      name: \"United States\"\n    }, {\n      id: 2,\n      name: \"Australia\"\n    }, {\n      id: 3,\n      name: \"Canada\"\n    }, {\n      id: 4,\n      name: \"Brazil\"\n    }, {\n      id: 5,\n      name: \"England\"\n    }];\n  }\n\n  ngOnInit() {\n    this.datasetsService.GetListCountries().subscribe(datas => {\n      console.log(\"Pays >> \", datas);\n    });\n    this.contactForm = this.fb.group({\n      country: [null]\n    });\n    this.setDefaults();\n    this.contactForm.get(\"country\")?.valueChanges.subscribe(f => {\n      this.onCountryChanged(f);\n    });\n  }\n\n  submit() {\n    console.log(\"Form Submitted\");\n    console.log(this.contactForm.value);\n  }\n\n  setDefaults() {\n    this.contactForm.get(\"country\")?.patchValue(null);\n  }\n\n  onCountryChanged(value) {\n    console.log('onCountryChanged');\n    console.log(value);\n  }\n\n  addCountry() {\n    const country = this.countries.find(el => el.name === this.country_name);\n\n    if (!country) {\n      let id = Math.max.apply(Math, this.countries.map(function (o) {\n        return o.id;\n      }));\n      this.countries.push({\n        id: id + 1,\n        name: this.country_name\n      });\n      this.country_name = \"\";\n    }\n  }\n\n  setCountry() {\n    const country = this.countries.find(el => el.name === this.set_country);\n\n    if (country) {\n      this.contactForm.get(\"country\")?.patchValue(country.id);\n    }\n  }\n\n}\n\nReadonlyComponent.ɵfac = function ReadonlyComponent_Factory(t) {\n  return new (t || ReadonlyComponent)(i0.ɵɵdirectiveInject(i1.ConnectionStatusService), i0.ɵɵdirectiveInject(i2.DatasetsService), i0.ɵɵdirectiveInject(i3.FormBuilder), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n\nReadonlyComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ReadonlyComponent,\n  selectors: [[\"page-readonly\"]],\n  features: [i0.ɵɵProvidersFeature([SynchroService])],\n  decls: 17,\n  vars: 7,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [\"formControlName\", \"country\"], [\"disabled\", \"\", 3, \"ngValue\"], [3, \"ngValue\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"submit\"], [3, \"ngModel\", \"ngModelChange\"], [3, \"click\"], [3, \"ngValue\"]],\n  template: function ReadonlyComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function ReadonlyComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.submit();\n      });\n      i0.ɵɵelementStart(1, \"p\")(2, \"select\", 1)(3, \"option\", 2);\n      i0.ɵɵtext(4, \"Select Country\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(5, ReadonlyComponent_option_5_Template, 2, 2, \"option\", 3);\n      i0.ɵɵpipe(6, \"async\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"button\", 4);\n      i0.ɵɵtext(8, \"Submit\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(9, \"p\")(10, \"input\", 5);\n      i0.ɵɵlistener(\"ngModelChange\", function ReadonlyComponent_Template_input_ngModelChange_10_listener($event) {\n        return ctx.country_name = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"button\", 6);\n      i0.ɵɵlistener(\"click\", function ReadonlyComponent_Template_button_click_11_listener() {\n        return ctx.addCountry();\n      });\n      i0.ɵɵtext(12, \"Add\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(13, \"p\")(14, \"input\", 5);\n      i0.ɵɵlistener(\"ngModelChange\", function ReadonlyComponent_Template_input_ngModelChange_14_listener($event) {\n        return ctx.set_country = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"button\", 6);\n      i0.ɵɵlistener(\"click\", function ReadonlyComponent_Template_button_click_15_listener() {\n        return ctx.setCountry();\n      });\n      i0.ɵɵtext(16, \"Set Country\");\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.contactForm);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngValue\", null);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(6, 5, ctx.$countries));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngModel\", ctx.country_name);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.set_country);\n    }\n  },\n  dependencies: [i4.NgForOf, i3.ɵNgNoValidate, i3.NgSelectOption, i3.ɵNgSelectMultipleOption, i3.DefaultValueAccessor, i3.SelectControlValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.NgModel, i3.FormGroupDirective, i3.FormControlName, i4.AsyncPipe],\n  styles: [\".newListContainer[_ngcontent-%COMP%] {\\n  margin-top: 30px;\\n  padding-bottom: 20px;\\n  border-bottom: 1px dashed #504f4f;\\n}\\n\\n.btnSynchro[_ngcontent-%COMP%] {\\n  text-align: center;\\n  margin-top: 10px;\\n}\\n\\n.btnSynchro[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\\n  margin: 0 5px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlYWRvbmx5LmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsZ0JBQUE7RUFDQSxvQkFBQTtFQUNBLGlDQUFBO0FBQ0Y7O0FBRUE7RUFDRSxrQkFBQTtFQUNBLGdCQUFBO0FBQ0Y7O0FBQ0U7RUFDRSxhQUFBO0FBQ0oiLCJmaWxlIjoicmVhZG9ubHkuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIubmV3TGlzdENvbnRhaW5lciB7XHJcbiAgbWFyZ2luLXRvcDogMzBweDtcclxuICBwYWRkaW5nLWJvdHRvbTogMjBweDtcclxuICBib3JkZXItYm90dG9tOiAxcHggZGFzaGVkICM1MDRmNGY7XHJcbn1cclxuXHJcbi5idG5TeW5jaHJvIHtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7IFxyXG4gIG1hcmdpbi10b3A6IDEwcHg7XHJcblxyXG4gIGJ1dHRvbiB7XHJcbiAgICBtYXJnaW46IDAgNXB4O1xyXG4gIH1cclxufVxyXG4iXX0= */\"],\n  changeDetection: 0\n});","map":{"version":3,"mappings":"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","names":["ChangeDetectorRef","SynchroService","i0","ReadonlyComponent","constructor","connectionStatusService","datasetsService","fb","cdr","GetListCountries","id","name","ngOnInit","subscribe","datas","console","log","contactForm","group","country","setDefaults","get","valueChanges","f","onCountryChanged","submit","value","patchValue","addCountry","countries","find","el","country_name","Math","max","apply","map","o","push","setCountry","set_country","selectors","features","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\nicos\\Dev\\poc\\poc-pwa\\src\\app\\pages\\readonly\\readonly.component.ts","C:\\Users\\nicos\\Dev\\poc\\poc-pwa\\src\\app\\pages\\readonly\\readonly.component.html"],"sourcesContent":["import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { ConnectionStatusService } from '../../../services/connection-status.service';\r\nimport { DatasetsService } from '../../../services/datasets.service';\r\nimport { SynchroService } from '../../../services/synchro.service';\r\n\r\n@Component({\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  selector: 'page-readonly',\r\n  templateUrl: './readonly.component.html',\r\n  styleUrls: ['./readonly.component.scss'],\r\n  providers: [SynchroService]\r\n})\r\nexport class ReadonlyComponent implements OnInit {\r\n  public $countries: Observable<any> = this.datasetsService.GetListCountries()\r\n  public contactForm!: FormGroup;\r\n  public country_name = \"\";\r\n  public set_country = \"\";\r\n\r\n  public countries = [\r\n    { id: 1, name: \"United States\" },\r\n    { id: 2, name: \"Australia\" },\r\n    { id: 3, name: \"Canada\" },\r\n    { id: 4, name: \"Brazil\" },\r\n    { id: 5, name: \"England\" }\r\n  ];\r\n\r\n  constructor(\r\n    private connectionStatusService: ConnectionStatusService,\r\n    private datasetsService: DatasetsService,\r\n    private fb: FormBuilder,\r\n    private cdr: ChangeDetectorRef,) { }\r\n\r\n  ngOnInit() {\r\n\r\n    this.datasetsService.GetListCountries().subscribe((datas) => {\r\n      console.log(\"Pays >> \", datas)\r\n    })\r\n\r\n    this.contactForm = this.fb.group({\r\n      country: [null]\r\n    });\r\n\r\n    this.setDefaults();\r\n\r\n    this.contactForm.get(\"country\")?.valueChanges\r\n      .subscribe(f => {\r\n        this.onCountryChanged(f);\r\n      })\r\n  }\r\n\r\n  submit() {\r\n    console.log(\"Form Submitted\")\r\n    console.log(this.contactForm.value)\r\n  }\r\n\r\n  setDefaults() {\r\n    this.contactForm.get(\"country\")?.patchValue(null);\r\n  }\r\n\r\n  onCountryChanged(value: any) {\r\n    console.log('onCountryChanged')\r\n    console.log(value)\r\n  }\r\n\r\n  addCountry() {\r\n    const country = this.countries.find(el => el.name === this.country_name);\r\n    if (!country) {\r\n      let id = Math.max.apply(Math, this.countries.map(function (o) { return o.id; }))\r\n      this.countries.push({ id: id + 1, name: this.country_name })\r\n      this.country_name = \"\";\r\n    }\r\n  }\r\n\r\n  setCountry() {\r\n    const country = this.countries.find(el => el.name === this.set_country);\r\n    if (country) {\r\n      this.contactForm.get(\"country\")?.patchValue(country.id);\r\n    }\r\n  }\r\n}\r\n","<form [formGroup]=\"contactForm\" (ngSubmit)=\"submit()\">\r\n    <p>\r\n        <select formControlName=\"country\">\r\n            <option [ngValue]=\"null\" disabled>Select Country</option>\r\n            <!-- <option *ngFor=\"let country of countries\" [ngValue]=\"country.id\">{{country.name}}</option> -->\r\n            <option *ngFor=\"let country of $countries | async\" [ngValue]=\"country._id\">{{country.name}}</option>\r\n        </select>\r\n        <button type=\"submit\">Submit</button>\r\n    </p>\r\n</form>\r\n\r\n<p>\r\n    <input [(ngModel)]=\"country_name\">\r\n    <button (click)=\"addCountry()\">Add</button>\r\n</p>\r\n\r\n<p>\r\n    <input [(ngModel)]=\"set_country\">\r\n    <button (click)=\"setCountry()\">Set Country</button>\r\n</p>"]},"metadata":{},"sourceType":"module"}