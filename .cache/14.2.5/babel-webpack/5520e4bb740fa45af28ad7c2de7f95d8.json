{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/nicos/Dev/poc/poc-pwa/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { liveQuery } from 'dexie';\nimport { forkJoin, from, map, switchMap } from 'rxjs';\nimport { db, ISynchroRecordType } from 'src/services/db';\nimport * as i0 from \"@angular/core\";\nexport class CrudDbService {\n  getRecords() {\n    return from(liveQuery(() => db.todoLists.toArray())).pipe(map(lists => lists.map(list => {\n      const listeName = list.title;\n      return db.todoItems.where({\n        todoListId: list.id\n      }).toArray().then(todoItems => {\n        return {\n          id: list.id,\n          title: listeName,\n          todoItems: todoItems\n        };\n      });\n    })), switchMap(newListsObservables => {\n      return forkJoin(newListsObservables);\n    }));\n  }\n\n  getItemsFromOneList(listId) {\n    return from(liveQuery(() => db.todoItems.where({\n      todoListId: listId\n    }).toArray()));\n  }\n\n  addList(listName) {\n    return from(db.todoLists.add({\n      title: listName,\n      recordType: ISynchroRecordType.ADD\n    }));\n  }\n\n  addListItem(listId, itemName) {\n    return from(db.todoItems.add({\n      title: itemName,\n      todoListId: listId,\n      recordType: ISynchroRecordType.ADD\n    }));\n  }\n\n  resetDatabase() {\n    return _asyncToGenerator(function* () {\n      return db.resetDatabase();\n    })();\n  }\n\n}\n\nCrudDbService.ɵfac = function CrudDbService_Factory(t) {\n  return new (t || CrudDbService)();\n};\n\nCrudDbService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CrudDbService,\n  factory: CrudDbService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AACA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,QAAT,EAAmBC,IAAnB,EAAyBC,GAAzB,EAA0CC,SAA1C,QAA2D,MAA3D;AACA,SAASC,EAAT,EAAaC,kBAAb,QAA2D,iBAA3D;;AAKA,OAAM,MAAOC,aAAP,CAAoB;EAEfC,UAAU;IACb,OAAON,IAAI,CAACF,SAAS,CAAC,MAAMK,EAAE,CAACI,SAAH,CAAaC,OAAb,EAAP,CAAV,CAAJ,CAA8CC,IAA9C,CACHR,GAAG,CAAES,KAAD,IAAuBA,KAAK,CAACT,GAAN,CAAWU,IAAD,IAAmB;MACpD,MAAMC,SAAS,GAAWD,IAAI,CAACE,KAA/B;MAEA,OAAOV,EAAE,CAACW,SAAH,CAAaC,KAAb,CAAmB;QACtBC,UAAU,EAAEL,IAAI,CAACM;MADK,CAAnB,EAEJT,OAFI,GAEMU,IAFN,CAEYJ,SAAD,IAA0B;QACxC,OAAO;UAAEG,EAAE,EAAEN,IAAI,CAACM,EAAX;UAAeJ,KAAK,EAAED,SAAtB;UAAiCE,SAAS,EAAEA;QAA5C,CAAP;MACH,CAJM,CAAP;IAKH,CAR0B,CAAxB,CADA,EAUHZ,SAAS,CAACiB,mBAAmB,IAAG;MAC5B,OAAOpB,QAAQ,CAACoB,mBAAD,CAAf;IACH,CAFQ,CAVN,CAAP;EAcH;;EAEMC,mBAAmB,CAACC,MAAD,EAAY;IAClC,OAAOrB,IAAI,CAACF,SAAS,CAAC,MAAMK,EAAE,CAACW,SAAH,CAAaC,KAAb,CAAmB;MAC3CC,UAAU,EAAEK;IAD+B,CAAnB,EAEzBb,OAFyB,EAAP,CAAV,CAAX;EAGH;;EAEMc,OAAO,CAACC,QAAD,EAAiB;IAC3B,OAAOvB,IAAI,CAACG,EAAE,CAACI,SAAH,CAAaiB,GAAb,CAAiB;MACzBX,KAAK,EAAEU,QADkB;MAEzBE,UAAU,EAAErB,kBAAkB,CAACsB;IAFN,CAAjB,CAAD,CAAX;EAIH;;EAEMC,WAAW,CAACN,MAAD,EAAcO,QAAd,EAA8B;IAC5C,OAAO5B,IAAI,CAACG,EAAE,CAACW,SAAH,CAAaU,GAAb,CAAiB;MACzBX,KAAK,EAAEe,QADkB;MAEzBZ,UAAU,EAAEK,MAFa;MAGzBI,UAAU,EAAErB,kBAAkB,CAACsB;IAHN,CAAjB,CAAD,CAAX;EAKH;;EAEKG,aAAa;IAAA;MACf,OAAO1B,EAAE,CAAC0B,aAAH,EAAP;IADe;EAElB;;AA1CqB;;;mBAAbxB;AAAa;;;SAAbA;EAAayB,SAAbzB,aAAa;EAAA0B,YAFV","names":["liveQuery","forkJoin","from","map","switchMap","db","ISynchroRecordType","CrudDbService","getRecords","todoLists","toArray","pipe","lists","list","listeName","title","todoItems","where","todoListId","id","then","newListsObservables","getItemsFromOneList","listId","addList","listName","add","recordType","ADD","addListItem","itemName","resetDatabase","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\nicos\\Dev\\poc\\poc-pwa\\src\\services\\crud-db.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { liveQuery } from 'dexie';\r\nimport { forkJoin, from, map, Observable, switchMap } from 'rxjs';\r\nimport { db, ISynchroRecordType, TodoItem, TodoList } from 'src/services/db';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class CrudDbService {\r\n\r\n    public getRecords(): Observable<TodoList[]> {\r\n        return from(liveQuery(() => db.todoLists.toArray())).pipe(\r\n            map((lists: TodoList[]) => lists.map((list: TodoList) => {\r\n                const listeName: string = list.title\r\n\r\n                return db.todoItems.where({\r\n                    todoListId: list.id,\r\n                }).toArray().then((todoItems: TodoItem[]) => {\r\n                    return { id: list.id, title: listeName, todoItems: todoItems }\r\n                })\r\n            })),\r\n            switchMap(newListsObservables => {\r\n                return forkJoin(newListsObservables)\r\n            }),\r\n        )\r\n    }\r\n\r\n    public getItemsFromOneList(listId: any): Observable<TodoItem[]> {\r\n        return from(liveQuery(() => db.todoItems.where({\r\n            todoListId: listId,\r\n        }).toArray()))\r\n    }\r\n\r\n    public addList(listName: string): Observable<any> {\r\n        return from(db.todoLists.add({\r\n            title: listName,\r\n            recordType: ISynchroRecordType.ADD,\r\n        }))\r\n    }\r\n\r\n    public addListItem(listId: any, itemName: string): Observable<any> {\r\n        return from(db.todoItems.add({\r\n            title: itemName,\r\n            todoListId: listId,\r\n            recordType: ISynchroRecordType.ADD,\r\n        }))\r\n    }\r\n\r\n    async resetDatabase(): Promise<any> {\r\n        return db.resetDatabase()\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}