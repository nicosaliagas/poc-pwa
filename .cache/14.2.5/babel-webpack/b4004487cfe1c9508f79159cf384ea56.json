{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/nicos/Dev/poc/poc-pwa/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { ChangeDetectorRef } from '@angular/core';\nimport { StringService } from 'cocori-ng/src/feature-core';\nimport { firstValueFrom, from, map, mergeMap, Subject, toArray } from 'rxjs';\nimport { IConnectionStatusValue } from '../../../services/connection-status.service';\nimport { SynchroService } from '../../../services/synchro.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../services/connection-status.service\";\nimport * as i2 from \"src/services/crud-api.service\";\nimport * as i3 from \"../../../services/synchro.service\";\nimport * as i4 from \"../../../services/crud-db.service\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/forms\";\nimport * as i7 from \"./item-list/item-list.component\";\n\nfunction HomeComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"item-list\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const todoList_r2 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"todoList\", todoList_r2);\n  }\n}\n\nexport let HomeComponent = /*#__PURE__*/(() => {\n  class HomeComponent {\n    constructor(connectionStatusService, crudApiService, synchroService, crudDbService, cdr) {\n      this.connectionStatusService = connectionStatusService;\n      this.crudApiService = crudApiService;\n      this.synchroService = synchroService;\n      this.crudDbService = crudDbService;\n      this.cdr = cdr;\n      this.listName = 'My new list';\n      this.todoLists = [];\n    }\n\n    ngOnInit() {\n      this.connectionStatusService.onConnectionStatutUpdated.subscribe(data => {\n        this.connectionStatus = data;\n        this.readDatas();\n      });\n    }\n\n    readDatas() {\n      this.todoLists = [];\n\n      if (this.connectionStatus === IConnectionStatusValue.ONLINE) {\n        this.getAllTodosListItemsAPI();\n      } else {\n        this.getAllTodosListItemsIndexedDb();\n      }\n    }\n\n    getAllTodosListItemsIndexedDb() {\n      this.todoLists = [];\n      this.crudDbService.getRecords().subscribe(datas => {\n        this.todoLists = datas;\n        this.cdr.detectChanges();\n      });\n      this.cdr.detectChanges();\n    }\n\n    getAllTodosListItemsAPI() {\n      var subject = new Subject();\n      this.todoLists.splice(0, this.todoLists.length);\n      /** all the lists created */\n\n      this.crudApiService.GetCrucrudInfos('').pipe(mergeMap(lists => // `from` emits each contact separately\n      from(lists).pipe( // load each contact\n      mergeMap(list => this.getListTodoItems(list)), // collect all contacts into an array\n      toArray(), // add the newly fetched data to original result\n      map(todoLists => ({ ...this.todoLists,\n        todoLists\n      }))))).subscribe(datas => {\n        this.todoLists = datas.todoLists;\n        console.log(\"pute >> \", this.todoLists);\n        this.cdr.detectChanges();\n        subject.next(datas.todoLists);\n      });\n      return subject.asObservable();\n    }\n    /**\r\n     * It takes a list name as a parameter, calls the GetCrucrudInfos function from the crudApiService,\r\n     * and then maps the result to an object with a title and todoItems property.\r\n     * @param {string} listName - string - the name of the list you want to get the items from\r\n     * @returns An Observable of type { title: string, todoItems: any[] }\r\n     */\n\n\n    getListTodoItems(listName) {\n      return this.crudApiService.GetCrucrudInfos(listName).pipe(map(todoItems => ({\n        title: listName,\n        todoItems: todoItems\n      })));\n    }\n\n    addNewList() {\n      this.listName = new StringService(this.listName).removeAllSpaces().removeAllSpecialsCharacters().replaceAllAccentByNonAccentCharacters().toString(); // if (this.connectionStatus === IConnectionStatusValue.ONLINE) {\n\n      this.crudApiService.NewListRessouce(this.listName).subscribe(() => {\n        this.readDatas();\n      }); // } else {\n      //   this.crudDbService.addList(this.listName).subscribe(() => this.readDatas())\n      // }\n    }\n\n    resetLocalDatabase() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        yield _this.crudDbService.resetDatabase();\n\n        if (_this.connectionStatus === IConnectionStatusValue.OFFLINE) {\n          _this.readDatas();\n        }\n      })();\n    }\n\n    resetServerDatabase() {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        yield Promise.all(_this2.todoLists.map( /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (list) {\n            const listeName = list.title;\n            yield firstValueFrom(_this2.crudApiService.DeleteListRessource(listeName));\n          });\n\n          return function (_x) {\n            return _ref.apply(this, arguments);\n          };\n        }()));\n      })();\n    }\n\n    identifyList(index, list) {\n      return `${list.id}${list.title}`;\n    }\n\n    sychronize() {\n      var _this3 = this;\n\n      return _asyncToGenerator(function* () {\n        if (_this3.connectionStatus === IConnectionStatusValue.ONLINE) {\n          yield _this3.synchroService.indexedDBToServer();\n          yield _this3.crudDbService.resetDatabase();\n          yield firstValueFrom(_this3.getAllTodosListItemsAPI());\n          yield _this3.synchroService.serverToIndexedDB(_this3.todoLists);\n\n          _this3.readDatas();\n        } else {\n          window.alert(\"Vous devez être connecté au réseau pour synchroniser les données de l'application.\");\n        }\n      })();\n    }\n\n  }\n\n  HomeComponent.ɵfac = function HomeComponent_Factory(t) {\n    return new (t || HomeComponent)(i0.ɵɵdirectiveInject(i1.ConnectionStatusService), i0.ɵɵdirectiveInject(i2.CrudApiService), i0.ɵɵdirectiveInject(i3.SynchroService), i0.ɵɵdirectiveInject(i4.CrudDbService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n\n  HomeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: HomeComponent,\n    selectors: [[\"page-home\"]],\n    features: [i0.ɵɵProvidersFeature([SynchroService])],\n    decls: 23,\n    vars: 3,\n    consts: [[1, \"btnSynchro\"], [\"type\", \"submit\", 3, \"click\"], [1, \"newListContainer\", 2, \"margin-top\", \"30px\"], [\"autocomplete\", \"off\", \"type\", \"text\", \"id\", \"name\", 3, \"ngModel\", \"ngModelChange\"], [\"name\", \"\"], [1, \"newListContainer\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [2, \"margin-top\", \"30px\"], [3, \"click\"], [3, \"todoList\"]],\n    template: function HomeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"button\", 1);\n        i0.ɵɵlistener(\"click\", function HomeComponent_Template_button_click_1_listener() {\n          return ctx.sychronize();\n        });\n        i0.ɵɵtext(2, \"\\uD83D\\uDD01 Synchroniser\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(3, \"div\", 2)(4, \"h3\");\n        i0.ɵɵtext(5, \"New List : \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"label\");\n        i0.ɵɵtext(7, \" List : \");\n        i0.ɵɵelementStart(8, \"input\", 3, 4);\n        i0.ɵɵlistener(\"ngModelChange\", function HomeComponent_Template_input_ngModelChange_8_listener($event) {\n          return ctx.listName = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(10, \"button\", 1);\n        i0.ɵɵlistener(\"click\", function HomeComponent_Template_button_click_10_listener() {\n          return ctx.addNewList();\n        });\n        i0.ɵɵtext(11, \"Add new list\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(12, \"div\", 5);\n        i0.ɵɵtemplate(13, HomeComponent_div_13_Template, 2, 1, \"div\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"div\", 7)(15, \"h3\");\n        i0.ɵɵtext(16, \"Reset server database\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"button\", 8);\n        i0.ɵɵlistener(\"click\", function HomeComponent_Template_button_click_17_listener() {\n          return ctx.resetServerDatabase();\n        });\n        i0.ɵɵtext(18, \"Reset Server Database\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"h3\");\n        i0.ɵɵtext(20, \"Reset local Database\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"button\", 8);\n        i0.ɵɵlistener(\"click\", function HomeComponent_Template_button_click_21_listener() {\n          return ctx.resetLocalDatabase();\n        });\n        i0.ɵɵtext(22, \"Reset Local Database\");\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngModel\", ctx.listName);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngForOf\", ctx.todoLists)(\"ngForTrackBy\", ctx.identifyList);\n      }\n    },\n    dependencies: [i5.NgForOf, i6.DefaultValueAccessor, i6.NgControlStatus, i6.NgModel, i7.ItemListComponent],\n    styles: [\".newListContainer[_ngcontent-%COMP%]{margin-top:30px;padding-bottom:20px;border-bottom:1px dashed #504f4f}.btnSynchro[_ngcontent-%COMP%]{text-align:center;margin-top:10px}.btnSynchro[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{margin:0 5px}\"],\n    changeDetection: 0\n  });\n  return HomeComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}