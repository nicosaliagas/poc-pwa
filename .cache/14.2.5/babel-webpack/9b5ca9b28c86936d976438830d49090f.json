{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/nicos/Dev/poc/poc-pwa/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { ChangeDetectorRef } from '@angular/core';\nimport { StringService } from 'cocori-ng/src/feature-core';\nimport { liveQuery } from 'dexie';\nimport { from, map, mergeMap, toArray } from 'rxjs';\nimport { db } from 'src/services/db';\nimport { IConnectionStatusValue } from '../../../services/connection-status.service';\nimport { SynchroService } from '../../../services/synchro.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../services/connection-status.service\";\nimport * as i2 from \"src/services/crud-api.service\";\nimport * as i3 from \"../../../services/synchro.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/forms\";\nimport * as i6 from \"./item-list/item-list.component\";\n\nfunction HomeComponent_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"item-list\", 7);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const todoList_r2 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"todoList\", todoList_r2);\n  }\n}\n\nexport class HomeComponent {\n  constructor(connectionStatusService, crudApiService, synchroService, cdr) {\n    this.connectionStatusService = connectionStatusService;\n    this.crudApiService = crudApiService;\n    this.synchroService = synchroService;\n    this.cdr = cdr;\n    this.todoLists$ = liveQuery(() => db.todoLists.toArray());\n    this.listName = 'My new list';\n    this.todoLists = [];\n  }\n\n  ngOnInit() {\n    this.connectionStatusService.onConnectionStatutUpdated.subscribe(data => {\n      this.connectionStatus = data;\n      this.readDatas();\n    });\n  }\n\n  readDatas() {\n    this.todoLists = [];\n\n    if (this.connectionStatus === IConnectionStatusValue.ONLINE) {\n      this.getAllTodosListItemsAPI();\n    } else {\n      this.getAllTodosListItemsIndexedDb();\n    }\n  }\n\n  getAllTodosListItemsIndexedDb() {\n    this.todoLists = [];\n    db.todoLists.toArray().then(datas => {\n      /** each list name */\n      datas.forEach(data => {\n        const listeName = data.title;\n        console.log(\"List from indexedDB >> \", data);\n        db.todoItems.where({\n          todoListId: data.id\n        }).toArray().then(todoItems => {\n          console.log(\"todoItems >>> \", todoItems);\n          this.todoLists.push({\n            title: listeName,\n            todoItems: todoItems\n          });\n          /** liste des items d'une todo liste */\n          // todoItems.forEach((todoItem: TodoItem) => {\n          //   console.log(\"todoItem ajouté \", todoItem.title, \"dans la liste \", listeName)\n          // })\n\n          console.log(\"Todolists from local >>>>>>>>>>> \", this.todoLists);\n          this.cdr.detectChanges();\n        });\n      });\n    });\n  }\n\n  getAllTodosListItemsAPI() {\n    /** all the lists created */\n    this.crudApiService.GetCrucrudInfos('').pipe(mergeMap(lists => // `from` emits each contact separately\n    from(lists).pipe( // load each contact\n    mergeMap(list => this.getListTodoItems(list)), // collect all contacts into an array\n    toArray(), // add the newly fetched data to original result\n    map(todoLists => ({ ...this.todoLists,\n      todoLists\n    }))))).subscribe(datas => {\n      this.todoLists = datas.todoLists;\n      console.log(\"Todolists from api >>>>>>>>>>> \", this.todoLists);\n      this.cdr.detectChanges();\n    });\n  }\n  /**\r\n   * It takes a list name as a parameter, calls the GetCrucrudInfos function from the crudApiService,\r\n   * and then maps the result to an object with a title and todoItems property.\r\n   * @param {string} listName - string - the name of the list you want to get the items from\r\n   * @returns An Observable of type { title: string, todoItems: any[] }\r\n   */\n\n\n  getListTodoItems(listName) {\n    return this.crudApiService.GetCrucrudInfos(listName).pipe(map(todoItems => ({\n      title: listName,\n      todoItems: todoItems\n    })));\n  }\n\n  addNewList() {\n    this.listName = new StringService(this.listName).removeAllSpaces().removeAllSpecialsCharacters().replaceAllAccentByNonAccentCharacters().toString();\n\n    if (this.connectionStatus === IConnectionStatusValue.ONLINE) {\n      this.crudApiService.NewListRessouce(this.listName).pipe().subscribe(datas => {\n        this.readDatas();\n      });\n    } else {\n      db.todoLists.add({\n        title: this.listName\n      }).then(id => {\n        this.readDatas();\n      });\n    }\n  }\n\n  resetDatabase() {\n    return _asyncToGenerator(function* () {\n      yield db.resetDatabase();\n    })();\n  }\n\n  identifyList(index, list) {\n    return `${list.id}${list.title}`;\n  }\n\n  synchroServerToIndexedDb() {\n    this.synchroService.serverToIndexedDB(this.todoLists);\n  }\n\n  synchroIndexedDbToServer() {\n    this.synchroService.indexedDBToServer();\n  }\n\n}\n\nHomeComponent.ɵfac = function HomeComponent_Factory(t) {\n  return new (t || HomeComponent)(i0.ɵɵdirectiveInject(i1.ConnectionStatusService), i0.ɵɵdirectiveInject(i2.CrudApiService), i0.ɵɵdirectiveInject(i3.SynchroService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n\nHomeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: HomeComponent,\n  selectors: [[\"page-home\"]],\n  features: [i0.ɵɵProvidersFeature([SynchroService])],\n  decls: 19,\n  vars: 3,\n  consts: [[1, \"btnSynchro\"], [\"type\", \"submit\", 3, \"click\"], [1, \"newListContainer\", 2, \"margin-top\", \"30px\"], [\"autocomplete\", \"off\", \"type\", \"text\", \"id\", \"name\", 3, \"ngModel\", \"ngModelChange\"], [\"name\", \"\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"click\"], [3, \"todoList\"]],\n  template: function HomeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"button\", 1);\n      i0.ɵɵlistener(\"click\", function HomeComponent_Template_button_click_1_listener() {\n        return ctx.synchroServerToIndexedDb();\n      });\n      i0.ɵɵtext(2, \"\\uD83D\\uDD01 Server -> Local \\uD83E\\uDD70\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"button\", 1);\n      i0.ɵɵlistener(\"click\", function HomeComponent_Template_button_click_3_listener() {\n        return ctx.synchroIndexedDbToServer();\n      });\n      i0.ɵɵtext(4, \"\\uD83D\\uDD01 Local -> Server\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(5, \"div\", 2)(6, \"h3\");\n      i0.ɵɵtext(7, \"New List : \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"label\");\n      i0.ɵɵtext(9, \" List : \");\n      i0.ɵɵelementStart(10, \"input\", 3, 4);\n      i0.ɵɵlistener(\"ngModelChange\", function HomeComponent_Template_input_ngModelChange_10_listener($event) {\n        return ctx.listName = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(12, \"button\", 1);\n      i0.ɵɵlistener(\"click\", function HomeComponent_Template_button_click_12_listener() {\n        return ctx.addNewList();\n      });\n      i0.ɵɵtext(13, \"Add new list\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(14, HomeComponent_div_14_Template, 2, 1, \"div\", 5);\n      i0.ɵɵelementStart(15, \"h3\");\n      i0.ɵɵtext(16, \"Reset the Database\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(17, \"button\", 6);\n      i0.ɵɵlistener(\"click\", function HomeComponent_Template_button_click_17_listener() {\n        return ctx.resetDatabase();\n      });\n      i0.ɵɵtext(18, \"Reset Database\");\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(10);\n      i0.ɵɵproperty(\"ngModel\", ctx.listName);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngForOf\", ctx.todoLists)(\"ngForTrackBy\", ctx.identifyList);\n    }\n  },\n  dependencies: [i4.NgForOf, i5.DefaultValueAccessor, i5.NgControlStatus, i5.NgModel, i6.ItemListComponent],\n  styles: [\".newListContainer[_ngcontent-%COMP%] {\\n  margin-top: 30px;\\n  padding-bottom: 20px;\\n  border-bottom: 1px dashed #504f4f;\\n}\\n\\n.btnSynchro[_ngcontent-%COMP%] {\\n  text-align: center;\\n  margin-top: 10px;\\n}\\n\\n.btnSynchro[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\\n  margin: 0 5px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhvbWUuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxnQkFBQTtFQUNBLG9CQUFBO0VBQ0EsaUNBQUE7QUFDRjs7QUFFQTtFQUNFLGtCQUFBO0VBQ0EsZ0JBQUE7QUFDRjs7QUFDRTtFQUNFLGFBQUE7QUFDSiIsImZpbGUiOiJob21lLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLm5ld0xpc3RDb250YWluZXIge1xyXG4gIG1hcmdpbi10b3A6IDMwcHg7XHJcbiAgcGFkZGluZy1ib3R0b206IDIwcHg7XHJcbiAgYm9yZGVyLWJvdHRvbTogMXB4IGRhc2hlZCAjNTA0ZjRmO1xyXG59XHJcblxyXG4uYnRuU3luY2hybyB7XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyOyBcclxuICBtYXJnaW4tdG9wOiAxMHB4O1xyXG5cclxuICBidXR0b24ge1xyXG4gICAgbWFyZ2luOiAwIDVweDtcclxuICB9XHJcbn1cclxuIl19 */\"],\n  changeDetection: 0\n});","map":{"version":3,"mappings":"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","names":["ChangeDetectorRef","StringService","liveQuery","from","map","mergeMap","toArray","db","IConnectionStatusValue","SynchroService","i0","HomeComponent","constructor","connectionStatusService","crudApiService","synchroService","cdr","todoLists","ngOnInit","onConnectionStatutUpdated","subscribe","data","connectionStatus","readDatas","ONLINE","getAllTodosListItemsAPI","getAllTodosListItemsIndexedDb","then","datas","forEach","listeName","title","console","log","todoItems","where","todoListId","id","push","detectChanges","GetCrucrudInfos","pipe","lists","list","getListTodoItems","listName","addNewList","removeAllSpaces","removeAllSpecialsCharacters","replaceAllAccentByNonAccentCharacters","toString","NewListRessouce","add","resetDatabase","identifyList","index","synchroServerToIndexedDb","serverToIndexedDB","synchroIndexedDbToServer","indexedDBToServer","selectors","features","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\nicos\\Dev\\poc\\poc-pwa\\src\\app\\pages\\home\\home.component.ts","C:\\Users\\nicos\\Dev\\poc\\poc-pwa\\src\\app\\pages\\home\\home.component.html"],"sourcesContent":["import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit } from '@angular/core';\r\nimport { StringService } from 'cocori-ng/src/feature-core';\r\nimport { liveQuery } from 'dexie';\r\nimport { from, map, mergeMap, toArray } from 'rxjs';\r\nimport { CrudApiService } from 'src/services/crud-api.service';\r\nimport { db, TodoItem, TodoList } from 'src/services/db';\r\n\r\nimport { ConnectionStatusService, IConnectionStatusValue } from '../../../services/connection-status.service';\r\nimport { SynchroService } from '../../../services/synchro.service';\r\n\r\n@Component({\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  selector: 'page-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.scss'],\r\n  providers: [SynchroService]\r\n})\r\nexport class HomeComponent implements OnInit {\r\n  todoLists$ = liveQuery(() => db.todoLists.toArray());\r\n  listName = 'My new list';\r\n  todoLists: TodoList[] = [];\r\n  connectionStatus!: IConnectionStatusValue;\r\n\r\n  constructor(\r\n    private connectionStatusService: ConnectionStatusService,\r\n    private crudApiService: CrudApiService,\r\n    private synchroService: SynchroService,\r\n    private cdr: ChangeDetectorRef,) { }\r\n\r\n  ngOnInit(): void {\r\n\r\n    this.connectionStatusService.onConnectionStatutUpdated.subscribe((data: IConnectionStatusValue) => {\r\n      this.connectionStatus = data\r\n\r\n      this.readDatas()\r\n    })\r\n  }\r\n\r\n  private readDatas() {\r\n    this.todoLists = []\r\n\r\n    if (this.connectionStatus === IConnectionStatusValue.ONLINE) {\r\n      this.getAllTodosListItemsAPI()\r\n    } else {\r\n      this.getAllTodosListItemsIndexedDb()\r\n    }\r\n  }\r\n\r\n  private getAllTodosListItemsIndexedDb() {\r\n    this.todoLists = []\r\n\r\n    db.todoLists.toArray().then((datas: TodoList[]) => {\r\n      /** each list name */\r\n      datas.forEach((data: TodoList) => {\r\n        const listeName: string = data.title\r\n\r\n        console.log(\"List from indexedDB >> \", data)\r\n\r\n        db.todoItems.where({\r\n          todoListId: data.id,\r\n        }).toArray().then((todoItems: TodoItem[]) => {\r\n          console.log(\"todoItems >>> \", todoItems)\r\n\r\n          this.todoLists.push({ title: listeName, todoItems: todoItems })\r\n\r\n          /** liste des items d'une todo liste */\r\n          // todoItems.forEach((todoItem: TodoItem) => {\r\n          //   console.log(\"todoItem ajouté \", todoItem.title, \"dans la liste \", listeName)\r\n          // })\r\n\r\n          console.log(\"Todolists from local >>>>>>>>>>> \", this.todoLists)\r\n\r\n          this.cdr.detectChanges()\r\n        })\r\n      })\r\n    })\r\n  }\r\n\r\n  private getAllTodosListItemsAPI() {\r\n    /** all the lists created */\r\n    this.crudApiService.GetCrucrudInfos('').pipe(\r\n      mergeMap((lists: string[]) =>\r\n        // `from` emits each contact separately\r\n        from(lists).pipe(\r\n          // load each contact\r\n          mergeMap((list: string) => this.getListTodoItems(list)),\r\n          // collect all contacts into an array\r\n          toArray(),\r\n          // add the newly fetched data to original result\r\n          map(todoLists => ({ ...this.todoLists, todoLists })),\r\n        ))\r\n    ).subscribe((datas: { todoLists: TodoList[] }) => {\r\n      this.todoLists = datas.todoLists\r\n\r\n      console.log(\"Todolists from api >>>>>>>>>>> \", this.todoLists)\r\n\r\n      this.cdr.detectChanges()\r\n    })\r\n  }\r\n\r\n  /**\r\n   * It takes a list name as a parameter, calls the GetCrucrudInfos function from the crudApiService,\r\n   * and then maps the result to an object with a title and todoItems property.\r\n   * @param {string} listName - string - the name of the list you want to get the items from\r\n   * @returns An Observable of type { title: string, todoItems: any[] }\r\n   */\r\n  private getListTodoItems(listName: string) {\r\n    return this.crudApiService.GetCrucrudInfos(listName).pipe(\r\n      map(todoItems => ({ title: listName, todoItems: todoItems }))\r\n    )\r\n  }\r\n\r\n  public addNewList() {\r\n    this.listName = new StringService(this.listName)\r\n      .removeAllSpaces()\r\n      .removeAllSpecialsCharacters()\r\n      .replaceAllAccentByNonAccentCharacters()\r\n      .toString()\r\n\r\n    if (this.connectionStatus === IConnectionStatusValue.ONLINE) {\r\n      this.crudApiService.NewListRessouce(this.listName).pipe(\r\n      ).subscribe((datas: any) => {\r\n        this.readDatas()\r\n      })\r\n    } else {\r\n      db.todoLists.add({\r\n        title: this.listName,\r\n      }).then((id: number) => {\r\n        this.readDatas()\r\n      })\r\n    }\r\n  }\r\n\r\n  async resetDatabase() {\r\n    await db.resetDatabase();\r\n  }\r\n\r\n  identifyList(index: number, list: TodoList) {\r\n    return `${list.id}${list.title}`;\r\n  }\r\n\r\n  public synchroServerToIndexedDb() {\r\n    this.synchroService.serverToIndexedDB(this.todoLists)\r\n  }\r\n\r\n  public synchroIndexedDbToServer() {\r\n    this.synchroService.indexedDBToServer()\r\n  }\r\n}\r\n","\r\n<div class=\"btnSynchro\">\r\n    <button type=\"submit\" (click)=\"synchroServerToIndexedDb()\">🔁 Server -> Local 🥰</button>\r\n    <button type=\"submit\" (click)=\"synchroIndexedDbToServer()\">🔁 Local -> Server</button>\r\n</div>\r\n\r\n<div class=\"newListContainer\" style=\"margin-top: 30px;\">\r\n    <h3>New List : </h3>\r\n    <label>\r\n        List :\r\n        <input autocomplete=\"off\" type=\"text\" id=\"name\" #name [(ngModel)]=\"listName\" />\r\n    </label>\r\n    <button type=\"submit\" (click)=\"addNewList()\">Add new list</button>\r\n</div>\r\n\r\n<!-- from api crud -->\r\n<div *ngFor=\"let todoList of todoLists; trackBy: identifyList\">\r\n    <item-list [todoList]=\"todoList\"></item-list>\r\n</div>\r\n<!-- <div *ngFor=\"let todoList of todoLists$ | async; trackBy: identifyList\">\r\n    <item-list [todoList]=\"todoList\"></item-list>\r\n</div> -->\r\n\r\n<h3>Reset the Database</h3>\r\n<button (click)=\"resetDatabase()\">Reset Database</button>"]},"metadata":{},"sourceType":"module"}