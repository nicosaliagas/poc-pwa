{"ast":null,"code":"import { HttpService, SkipHeaders } from 'cocori-ng/src/feature-core';\nimport { of, Subject, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { IConnectionStatusValue } from './connection-status.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./crud-db.service\";\nimport * as i2 from \"./connection-status.service\";\nimport * as i3 from \"./environment.service\";\nimport * as i4 from \"cocori-ng/src/feature-core\";\nexport let CrudApiService = /*#__PURE__*/(() => {\n  class CrudApiService {\n    constructor(httpService, crudDbService, connectionStatusService, environmentService) {\n      this.httpService = httpService;\n      this.crudDbService = crudDbService;\n      this.connectionStatusService = connectionStatusService;\n      this.environmentService = environmentService;\n      this.onCompteUpdated = new Subject();\n    }\n\n    GetCrucrudInfos(listName) {\n      return this.httpService.get(`https://crudcrud.com/api/${this.environmentService.crudcrudKey}/${listName}`, {}, SkipHeaders.TRUE);\n    }\n\n    NewListRessouce(listName, itemTitle, listId) {\n      let datas;\n\n      if (listName && itemTitle) {\n        datas = {\n          title: itemTitle\n        };\n      }\n\n      var subject = new Subject();\n      this.httpService.post(`https://crudcrud.com/api/${this.environmentService.crudcrudKey}/${listName}`, datas, SkipHeaders.TRUE).pipe(catchError(err => {\n        if (this.connectionStatusService.networkStatus === IConnectionStatusValue.OFFLINE) {\n          /** + rajouter l'élément dans la table cacheable ce qui permet de rafraichir la liste */\n          if (listName && !itemTitle) {\n            this.crudDbService.addList(listName);\n          } else {\n            this.crudDbService.addListItem(listId, itemTitle);\n          }\n\n          return of(true);\n        } else {\n          return throwError(() => err.error);\n        }\n      })).subscribe(datas => subject.next(datas));\n      return subject.asObservable();\n    }\n\n    DeleteListRessource(listName) {\n      return this.httpService.delete(`https://crudcrud.com/api/${this.environmentService.crudcrudKey}/${listName}`, {}, SkipHeaders.TRUE);\n    }\n\n  }\n\n  CrudApiService.ɵfac = function CrudApiService_Factory(t) {\n    return new (t || CrudApiService)(i0.ɵɵinject(HttpService), i0.ɵɵinject(i1.CrudDbService), i0.ɵɵinject(i2.ConnectionStatusService), i0.ɵɵinject(i3.EnvironmentService));\n  };\n\n  CrudApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CrudApiService,\n    factory: CrudApiService.ɵfac,\n    providedIn: 'root'\n  });\n  return CrudApiService;\n})();","map":null,"metadata":{},"sourceType":"module"}