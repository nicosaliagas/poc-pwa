{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/nicos/Dev/poc/poc-pwa/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { firstValueFrom, forkJoin, map } from 'rxjs';\nimport { db, ISynchroRecordType } from './db';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./crud-api.service\";\nexport let SynchroService = /*#__PURE__*/(() => {\n  class SynchroService {\n    constructor(crudApiService) {\n      this.crudApiService = crudApiService;\n    } // public serverToIndexedDB(lists: TodoList[]): Observable<any> {\n    //     return from(lists).pipe(\n    //         map((list: TodoList) => {\n    //             return from(liveQuery(() => db.todoLists.add({\n    //                 title: list.title,\n    //             }))).pipe(\n    //                 map((id: number) => list.todoItems?.map((item: TodoItem) => {\n    //                     if (item.title) {\n    //                         /** création des items pour chaque liste */\n    //                         return from(liveQuery(() => db.todoItems.add({\n    //                             title: item.title,\n    //                             todoListId: id,\n    //                         }))).subscribe()\n    //                     } else {\n    //                         return of(true)\n    //                     }\n    //                 }))\n    //             )\n    //         }),\n    //         switchMap(newListsObservables => {\n    //             return forkJoin(newListsObservables)\n    //         }),\n    //     )\n    // }\n\n\n    serverToIndexedDB(listsToAdd) {\n      return _asyncToGenerator(function* () {\n        yield Promise.all(listsToAdd.map( /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (list) {\n            const idListAdded = yield db.todoLists.add({\n              title: list.title\n            });\n            console.log(\"id list juts added\", idListAdded);\n\n            if (list.todoItems?.length) {\n              yield Promise.all(list.todoItems.map( /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator(function* (item) {\n                  if (item.title) {\n                    console.log(\"item just added\", item.title);\n                    yield db.todoItems.add({\n                      title: item.title,\n                      todoListId: idListAdded\n                    });\n                  } else {\n                    yield 1;\n                  }\n                });\n\n                return function (_x2) {\n                  return _ref2.apply(this, arguments);\n                };\n              }()));\n            }\n          });\n\n          return function (_x) {\n            return _ref.apply(this, arguments);\n          };\n        }())); // return from(listsToAdd).pipe(\n        //     map((list: TodoList) => {\n        //         return from(liveQuery(() => db.todoLists.add({\n        //             title: list.title,\n        //         }))).pipe(\n        //             map((id: number) => list.todoItems?.map((item: TodoItem) => {\n        //                 if (item.title) {\n        //                     /** création des items pour chaque liste */\n        //                     return from(liveQuery(() => db.todoItems.add({\n        //                         title: item.title,\n        //                         todoListId: id,\n        //                     }))).subscribe()\n        //                 } else {\n        //                     return of(true)\n        //                 }\n        //             }))\n        //         )\n        //     }),\n        //     switchMap(newListsObservables => {\n        //         return forkJoin(newListsObservables)\n        //     }),\n        // )\n      })();\n    }\n\n    serverToIndexedDBXX(lists) {\n      let createListPromises = [];\n      let createItemsPromises = [];\n      /** construire un tableau de Promise avec l'id de la liste créé */\n\n      lists.forEach(list => {\n        console.log(\"try 1\");\n        createListPromises.push(db.todoLists.add({\n          title: list.title\n        }).then(listId => {\n          list.id = listId;\n          return list;\n        }));\n      });\n      /** une fois que toutes les listes ont été crées, on s'occupe de créer pour chacune d'elle leurs items */\n\n      return forkJoin(createListPromises).pipe(map(lists => {\n        lists.forEach(list => {\n          list.todoItems?.forEach(item => {\n            if (item.title) {\n              createItemsPromises.push(db.todoItems.add({\n                title: item.title,\n                todoListId: list.id\n              }));\n            }\n          });\n        });\n      }), map(() => forkJoin(createItemsPromises)));\n    }\n\n    indexedDBToServer() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        const listsToAdd = yield db.todoLists.where({\n          recordType: ISynchroRecordType.ADD\n        }).toArray();\n        console.log(\"lists to add \", listsToAdd);\n        yield Promise.all(listsToAdd.map( /*#__PURE__*/function () {\n          var _ref3 = _asyncToGenerator(function* (list) {\n            const listeName = list.title;\n            yield firstValueFrom(_this.crudApiService.NewListRessouce(listeName));\n            console.log(`list added ${list.title}`);\n            const listItemsToAdd = yield db.todoItems.where({\n              todoListId: list.id,\n              recordType: ISynchroRecordType.ADD\n            }).toArray();\n            console.log(`items for the list ${list.title}`, listItemsToAdd);\n            yield Promise.all(listItemsToAdd.map( /*#__PURE__*/function () {\n              var _ref4 = _asyncToGenerator(function* (item) {\n                console.log(`item added for the list ${list.title}`, item.title);\n                yield firstValueFrom(_this.crudApiService.NewListRessouce(listeName, item.title));\n              });\n\n              return function (_x4) {\n                return _ref4.apply(this, arguments);\n              };\n            }()));\n          });\n\n          return function (_x3) {\n            return _ref3.apply(this, arguments);\n          };\n        }()));\n      })();\n    }\n\n  }\n\n  SynchroService.ɵfac = function SynchroService_Factory(t) {\n    return new (t || SynchroService)(i0.ɵɵinject(i1.CrudApiService));\n  };\n\n  SynchroService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SynchroService,\n    factory: SynchroService.ɵfac\n  });\n  return SynchroService;\n})();","map":null,"metadata":{},"sourceType":"module"}