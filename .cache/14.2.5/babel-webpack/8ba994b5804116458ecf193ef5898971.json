{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/nicos/Dev/poc/poc-pwa/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { ChangeDetectorRef } from '@angular/core';\nimport { StringService } from 'cocori-ng/src/feature-core';\nimport { liveQuery } from 'dexie';\nimport { from, map, mergeMap, toArray } from 'rxjs';\nimport { db } from 'src/services/db';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/services/crud-api.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"./item-list/item-list.component\";\n\nfunction HomeComponent_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"item-list\", 7);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const todoList_r2 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"todoList\", todoList_r2);\n  }\n}\n\nexport class HomeComponent {\n  constructor(crudApiService, cdr) {\n    this.crudApiService = crudApiService;\n    this.cdr = cdr;\n    this.todoLists$ = liveQuery(() => db.todoLists.toArray());\n    this.listName = 'My new list';\n    this.todoLists = [];\n  }\n\n  ngOnInit() {\n    this.getAllTodosListItemsAPI();\n    this.todoLists$.subscribe(datas => {\n      console.log(\"💀\", datas);\n    });\n  }\n\n  getAllTodosListItemsAPI() {\n    /** all the lists created */\n    this.crudApiService.GetCrucrudInfos('').pipe(mergeMap(lists => // `from` emits each contact separately\n    from(lists).pipe( // load each contact\n    mergeMap(list => this.getListTodoItems(list)), // collect all contacts into an array\n    toArray(), // add the newly fetched data to original result\n    map(todoLists => ({ ...this.todoLists,\n      todoLists\n    }))))).subscribe(datas => {\n      this.todoLists = datas.todoLists;\n      console.log(\"datas >>>>>>>>>>> \", datas);\n      console.log(\"lists >>>>>>>>>>> \", this.todoLists);\n      this.cdr.detectChanges();\n    });\n  }\n  /**\r\n   * It takes a list name as a parameter, calls the GetCrucrudInfos function from the crudApiService,\r\n   * and then maps the result to an object with a title and todoItems property.\r\n   * @param {string} listName - string - the name of the list you want to get the items from\r\n   * @returns An Observable of type { title: string, todoItems: any[] }\r\n   */\n\n\n  getListTodoItems(listName) {\n    return this.crudApiService.GetCrucrudInfos(listName).pipe(map(todoItems => ({\n      title: listName,\n      todoItems: todoItems\n    })));\n  }\n\n  addNewList() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.listName = new StringService(_this.listName).removeAllSpaces().removeAllSpecialsCharacters().replaceAllAccentByNonAccentCharacters().toString();\n      yield db.todoLists.add({\n        title: _this.listName\n      });\n\n      _this.crudApiService.NewListRessouce(_this.listName).pipe().subscribe(datas => {\n        console.log(\"datas >>> \", datas);\n\n        _this.getAllTodosListItemsAPI();\n      });\n    })();\n  }\n\n  resetDatabase() {\n    return _asyncToGenerator(function* () {\n      yield db.resetDatabase();\n    })();\n  }\n\n  identifyList(index, list) {\n    return `${list.id}${list.title}`;\n  }\n\n  synchro() {\n    console.log(\"synchro > \", this.todoLists);\n  }\n\n}\n\nHomeComponent.ɵfac = function HomeComponent_Factory(t) {\n  return new (t || HomeComponent)(i0.ɵɵdirectiveInject(i1.CrudApiService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n\nHomeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: HomeComponent,\n  selectors: [[\"page-home\"]],\n  decls: 17,\n  vars: 3,\n  consts: [[1, \"btnSynchro\"], [\"type\", \"submit\", 3, \"click\"], [1, \"newListContainer\", 2, \"margin-top\", \"30px\"], [\"autocomplete\", \"off\", \"type\", \"text\", \"id\", \"name\", 3, \"ngModel\", \"ngModelChange\"], [\"name\", \"\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"click\"], [3, \"todoList\"]],\n  template: function HomeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"button\", 1);\n      i0.ɵɵlistener(\"click\", function HomeComponent_Template_button_click_1_listener() {\n        return ctx.synchro();\n      });\n      i0.ɵɵtext(2, \"\\uD83D\\uDD01 Synchroniser\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(3, \"div\", 2)(4, \"h3\");\n      i0.ɵɵtext(5, \"New List : \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"label\");\n      i0.ɵɵtext(7, \" List : \");\n      i0.ɵɵelementStart(8, \"input\", 3, 4);\n      i0.ɵɵlistener(\"ngModelChange\", function HomeComponent_Template_input_ngModelChange_8_listener($event) {\n        return ctx.listName = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(10, \"button\", 1);\n      i0.ɵɵlistener(\"click\", function HomeComponent_Template_button_click_10_listener() {\n        return ctx.addNewList();\n      });\n      i0.ɵɵtext(11, \"Add new list\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(12, HomeComponent_div_12_Template, 2, 1, \"div\", 5);\n      i0.ɵɵelementStart(13, \"h3\");\n      i0.ɵɵtext(14, \"Reset the Database\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"button\", 6);\n      i0.ɵɵlistener(\"click\", function HomeComponent_Template_button_click_15_listener() {\n        return ctx.resetDatabase();\n      });\n      i0.ɵɵtext(16, \"Reset Database\");\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(8);\n      i0.ɵɵproperty(\"ngModel\", ctx.listName);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngForOf\", ctx.todoLists)(\"ngForTrackBy\", ctx.identifyList);\n    }\n  },\n  dependencies: [i2.NgForOf, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgModel, i4.ItemListComponent],\n  styles: [\".newListContainer[_ngcontent-%COMP%] {\\n  margin-top: 30px;\\n  padding-bottom: 20px;\\n  border-bottom: 1px dashed #504f4f;\\n}\\n\\n.btnSynchro[_ngcontent-%COMP%] {\\n  text-align: center;\\n  margin-top: 10px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhvbWUuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxnQkFBQTtFQUNBLG9CQUFBO0VBQ0EsaUNBQUE7QUFDRjs7QUFFQTtFQUNFLGtCQUFBO0VBQ0EsZ0JBQUE7QUFDRiIsImZpbGUiOiJob21lLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLm5ld0xpc3RDb250YWluZXIge1xyXG4gIG1hcmdpbi10b3A6IDMwcHg7XHJcbiAgcGFkZGluZy1ib3R0b206IDIwcHg7XHJcbiAgYm9yZGVyLWJvdHRvbTogMXB4IGRhc2hlZCAjNTA0ZjRmO1xyXG59XHJcblxyXG4uYnRuU3luY2hybyB7XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gIG1hcmdpbi10b3A6IDEwcHg7XHJcbn1cclxuIl19 */\"],\n  changeDetection: 0\n});","map":{"version":3,"mappings":"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","names":["ChangeDetectorRef","StringService","liveQuery","from","map","mergeMap","toArray","db","i0","HomeComponent","constructor","crudApiService","cdr","todoLists","ngOnInit","getAllTodosListItemsAPI","todoLists$","subscribe","datas","console","log","GetCrucrudInfos","pipe","lists","list","getListTodoItems","detectChanges","listName","todoItems","title","addNewList","removeAllSpaces","removeAllSpecialsCharacters","replaceAllAccentByNonAccentCharacters","toString","add","NewListRessouce","resetDatabase","identifyList","index","id","synchro","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\nicos\\Dev\\poc\\poc-pwa\\src\\app\\pages\\home\\home.component.ts","C:\\Users\\nicos\\Dev\\poc\\poc-pwa\\src\\app\\pages\\home\\home.component.html"],"sourcesContent":["import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit } from '@angular/core';\r\nimport { StringService } from 'cocori-ng/src/feature-core';\r\nimport { liveQuery } from 'dexie';\r\nimport { from, map, mergeMap, toArray } from 'rxjs';\r\nimport { CrudApiService } from 'src/services/crud-api.service';\r\nimport { db, TodoList } from 'src/services/db';\r\n\r\n@Component({\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  selector: 'page-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.scss'],\r\n})\r\nexport class HomeComponent implements OnInit {\r\n  todoLists$ = liveQuery(() => db.todoLists.toArray());\r\n  listName = 'My new list';\r\n  todoLists: any[] = [];\r\n\r\n  constructor(\r\n    private crudApiService: CrudApiService,\r\n    private cdr: ChangeDetectorRef,) { }\r\n\r\n  ngOnInit(): void {\r\n\r\n    this.getAllTodosListItemsAPI()\r\n\r\n    this.todoLists$.subscribe((datas) => {\r\n      console.log(\"💀\", datas)\r\n    })\r\n  }\r\n\r\n  private getAllTodosListItemsAPI() {\r\n    /** all the lists created */\r\n    this.crudApiService.GetCrucrudInfos('').pipe(\r\n      mergeMap((lists: string[]) =>\r\n        // `from` emits each contact separately\r\n        from(lists).pipe(\r\n          // load each contact\r\n          mergeMap((list: string) => this.getListTodoItems(list)),\r\n          // collect all contacts into an array\r\n          toArray(),\r\n          // add the newly fetched data to original result\r\n          map(todoLists => ({ ...this.todoLists, todoLists })),\r\n        ))\r\n    ).subscribe((datas: { todoLists: TodoList[] }) => {\r\n      this.todoLists = datas.todoLists\r\n\r\n      console.log(\"datas >>>>>>>>>>> \", datas)\r\n      console.log(\"lists >>>>>>>>>>> \", this.todoLists)\r\n\r\n      this.cdr.detectChanges()\r\n    })\r\n  }\r\n\r\n  /**\r\n   * It takes a list name as a parameter, calls the GetCrucrudInfos function from the crudApiService,\r\n   * and then maps the result to an object with a title and todoItems property.\r\n   * @param {string} listName - string - the name of the list you want to get the items from\r\n   * @returns An Observable of type { title: string, todoItems: any[] }\r\n   */\r\n  private getListTodoItems(listName: string) {\r\n    return this.crudApiService.GetCrucrudInfos(listName).pipe(\r\n      map(todoItems => ({ title: listName, todoItems: todoItems }))\r\n    )\r\n  }\r\n\r\n  async addNewList() {\r\n\r\n    this.listName = new StringService(this.listName)\r\n      .removeAllSpaces()\r\n      .removeAllSpecialsCharacters()\r\n      .replaceAllAccentByNonAccentCharacters()\r\n      .toString()\r\n\r\n    await db.todoLists.add({\r\n      title: this.listName,\r\n    });\r\n\r\n    this.crudApiService.NewListRessouce(this.listName).pipe(\r\n    ).subscribe((datas: any) => {\r\n      console.log(\"datas >>> \", datas)\r\n\r\n      this.getAllTodosListItemsAPI()\r\n    })\r\n  }\r\n\r\n  async resetDatabase() {\r\n    await db.resetDatabase();\r\n  }\r\n\r\n  identifyList(index: number, list: TodoList) {\r\n    return `${list.id}${list.title}`;\r\n  }\r\n\r\n  public synchro() {\r\n    console.log(\"synchro > \", this.todoLists)\r\n  }\r\n}\r\n","\r\n<div class=\"btnSynchro\">\r\n    <button type=\"submit\" (click)=\"synchro()\">🔁 Synchroniser</button>\r\n</div>\r\n\r\n<div class=\"newListContainer\" style=\"margin-top: 30px;\">\r\n    <h3>New List : </h3>\r\n    <label>\r\n        List :\r\n        <input autocomplete=\"off\" type=\"text\" id=\"name\" #name [(ngModel)]=\"listName\" />\r\n    </label>\r\n    <button type=\"submit\" (click)=\"addNewList()\">Add new list</button>\r\n</div>\r\n\r\n<!-- from api crud -->\r\n<div *ngFor=\"let todoList of todoLists; trackBy: identifyList\">\r\n    <item-list [todoList]=\"todoList\"></item-list>\r\n</div>\r\n<!-- <div *ngFor=\"let todoList of todoLists$ | async; trackBy: identifyList\">\r\n    <item-list [todoList]=\"todoList\"></item-list>\r\n</div> -->\r\n\r\n<h3>Reset the Database</h3>\r\n<button (click)=\"resetDatabase()\">Reset Database</button>"]},"metadata":{},"sourceType":"module"}