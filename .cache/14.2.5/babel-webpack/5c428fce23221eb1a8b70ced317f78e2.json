{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/nicos/Dev/poc/poc-pwa/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpService, SkipHeaders } from 'cocori-ng/src/feature-core';\nimport { catchError, firstValueFrom, from, map, mergeMap, of, Subject, throwError, toArray } from 'rxjs';\nimport { IConnectionStatusValue } from './connection-status.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./crud-db.service\";\nimport * as i2 from \"./connection-status.service\";\nimport * as i3 from \"./environment.service\";\nimport * as i4 from \"cocori-ng/src/feature-core\";\nexport let CrudApiService = /*#__PURE__*/(() => {\n  class CrudApiService {\n    constructor(httpService, crudDbService, connectionStatusService, environmentService) {\n      this.httpService = httpService;\n      this.crudDbService = crudDbService;\n      this.connectionStatusService = connectionStatusService;\n      this.environmentService = environmentService;\n      this.onRefreshList = new Subject();\n      this.todoLists = [];\n    }\n\n    GetListsItems() {\n      return this.httpService.get(`https://crudcrud.com/api/${this.environmentService.crudcrudKey}`, {}, SkipHeaders.TRUE);\n    }\n\n    GetListDatas(listName) {\n      return this.httpService.get(`https://crudcrud.com/api/${this.environmentService.crudcrudKey}/${listName}`, {}, SkipHeaders.TRUE);\n    }\n\n    GetListsItemsAPI() {\n      this.todoLists = this.todoLists.splice(0, this.todoLists.length);\n      return this.GetListsItems().pipe(mergeMap(lists => // `from` emits each contact separately\n      from(lists).pipe( // load each contact\n      mergeMap(list => this.getListItems(list)), // collect all contacts into an array\n      toArray(), // add the newly fetched data to original result\n      map(todoLists => ({ ...this.todoLists,\n        todoLists\n      })))));\n    }\n\n    getListItems(listName) {\n      return this.GetListDatas(listName).pipe(map(todoItems => ({\n        title: listName,\n        todoItems: todoItems\n      })));\n    }\n\n    NewListRessouceX(listName, itemTitle, listId) {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        let result;\n        let datas;\n\n        if (listName && itemTitle) {\n          datas = {\n            title: itemTitle\n          };\n        }\n\n        try {\n          // retrieve the data from backend.\n          result = yield firstValueFrom(_this.httpService.post(`https://crudcrud.com/api/${_this.environmentService.crudcrudKey}/${listName}`, datas, SkipHeaders.TRUE));\n          console.log(\"post api\");\n        } catch {\n          if (_this.connectionStatusService.networkStatus === IConnectionStatusValue.OFFLINE) {\n            console.log(\"Post fail, je suis hors ligne\");\n            console.log(\"todoLists >> \", listName, _this.todoLists);\n          }\n\n          console.log(\"post fail api\");\n        }\n\n        return result;\n      })();\n    }\n\n    NewListRessouce(listName, itemTitle, listId) {\n      let datas;\n\n      if (listName && itemTitle) {\n        datas = {\n          title: itemTitle\n        };\n      }\n\n      var subject = new Subject();\n      this.httpService.post(`https://crudcrud.com/api/${this.environmentService.crudcrudKey}/${listName}`, datas, SkipHeaders.TRUE).pipe(catchError(err => {\n        if (this.connectionStatusService.networkStatus === IConnectionStatusValue.OFFLINE) {\n          /** + rajouter l'élément dans la table cacheable ce qui permet de rafraichir la liste */\n          console.log(\"datas >> \", this.todoLists);\n\n          if (listName && !itemTitle) {\n            this.crudDbService.addList(listName);\n          } else {\n            this.crudDbService.addListItem(listId, itemTitle);\n          }\n\n          return of(true);\n        } else {\n          return throwError(() => err.error);\n        }\n      })).subscribe(datas => subject.next(datas));\n      return subject.asObservable();\n    }\n\n    DeleteListRessource(listName) {\n      return this.httpService.delete(`https://crudcrud.com/api/${this.environmentService.crudcrudKey}/${listName}`, {}, SkipHeaders.TRUE);\n    }\n\n  }\n\n  CrudApiService.ɵfac = function CrudApiService_Factory(t) {\n    return new (t || CrudApiService)(i0.ɵɵinject(HttpService), i0.ɵɵinject(i1.CrudDbService), i0.ɵɵinject(i2.ConnectionStatusService), i0.ɵɵinject(i3.EnvironmentService));\n  };\n\n  CrudApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CrudApiService,\n    factory: CrudApiService.ɵfac,\n    providedIn: 'root'\n  });\n  return CrudApiService;\n})();","map":null,"metadata":{},"sourceType":"module"}